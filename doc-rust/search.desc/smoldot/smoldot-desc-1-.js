searchState.loadedDescShard("smoldot", 1, "Marks the given substream as being ready to write out data.\nMaximum size of data frames to send out.\nWhen the remote sends a ping, we need to send out a pong. …\nWhen the remote sends a substream, and this substream gets …\nInitializes a new Yamux state machine.\nReturns the number of inbound substreams in the Yamux …\nOpens a new substream.\nQueues sending out a ping to the remote.\nSeed used for the randomness. Used to avoid HashDoS attack …\nFeeds data coming from a socket and outputs data to write …\nReturns <code>Some</code> if a <code>ReadWriteOutcome::GoAway</code> event has been …\nRejects an incoming substream.\nRemoves a dead substream from the state machine.\nAbruptly shuts down the substream. Sends a frame with the …\nResets the substream being processed and returns the …\nQueues a <code>GoAway</code> frame, requesting the remote to no longer …\nReturns the identifier of the substream being read/written.\nReturns the user data associated to the substream being …\nReturns the user data associated to the substream being …\nReturns an iterator to the list of all substream user …\nReturns an iterator to the list of all substream user …\nError code sent by the remote.\nList of all outgoing substreams that haven’t been …\nSubstream that has been reset.\nObject allowing reading and writing data from/to the given …\nThe <code>Yamux</code> state machine yielded back.\nThe <code>Yamux</code> state machine yielded back.\nThe <code>Yamux</code> state machine yielded back.\nThe <code>Yamux</code> state machine yielded back.\nThe <code>Yamux</code> state machine yielded back.\nContains the multihash of the TLS certificate.\nDomain name. Guarantees that the domain name has a valid …\nA multiaddress must always start with <code>/</code>.\nReturns an iterator to a list of buffers that, when …\nCreates a new empty <code>Multiaddr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks whether the given bytes have the proper format, and …\nTry to parse the given string as a domain name.\nAttempts to extract a protocol from an iterator of <code>/</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the serialized version of this <code>Multiaddr</code>.\nReturns the underlying bytes of the domain name.\nReturns the list of components of the multiaddress.\nPops the last protocol from the list.\nPushes a protocol at the end of this <code>Multiaddr</code>.\nShrinks the memory used by the underlying container to its …\nThe multihash is invalid.\nError when turning bytes into a <code>Multihash</code>.\nA multihash made of a code and a slice of data.\nReturns the data stored in this multihash.\nReturns the data stored in this multihash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks whether <code>input</code> is a valid multihash.\nChecks whether <code>input</code> is a valid multihash.\nReturns the code stored in this multihash.\nBuilds a multihash from the “identity” hash algorithm …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestroys the <code>Multihash</code> and returns the underlying buffer.\nEd25519 key doesn’t have a correct length.\nError decoding the Base58 encoding.\nError when decoding Base58 encoding.\nFailed to decode bytes into a multihash.\nAn Ed25519 public key.\nError when turning bytes into a <code>PeerId</code>.\nError potentially returned by …\nThe algorithm used in the multihash isn’t identity or …\nMultihash uses the identity algorithm, but the data isn’…\nDecoded bytes aren’t a valid <code>PeerId</code>.\nError when parsing a string to a <code>PeerId</code>.\nIdentifier of a node of the network.\nError decoding the Protobuf message.\nPublic key of a node’s identity.\nCall to <code>PublicKey::verify</code> has failed. No reason is …\nPublic key algorithm unknown.\nAlgorithms other than Ed25519 aren’t supported.\nReturns a raw bytes representation of this <code>PeerId</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks whether <code>data</code> is a valid <code>PeerId</code>.\nDecode a public key from a Protobuf structure, e.g. read …\nBuilds the <code>PeerId</code> corresponding to a public key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nConvert the <code>PublicKey</code> into the corresponding <code>PeerId</code>.\nReturns a base-58 encoded string of this <code>PeerId</code>.\nEncode the public key into a Protobuf structure for …\nVerifies whether the given signature is valid for the …\nError potentially returned by …\nError potentially returned by …\nInvalid LEB128 number.\nReading side of the stream is closed.\nReading side of the stream is closed.\nNumber of bytes decoded is larger than expected.\nSets the writing side of the connection to closed.\nDiscards all the incoming data. Updates …\nNumber of bytes that <code>ReadWrite::incoming_buffer</code> should …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuffer of socket data ready to be processed.\nReturns the size of the data available in the incoming …\nExtract a certain number of bytes from the read buffer.\nSame as <code>ReadWrite::incoming_bytes_take_array</code>, but reads a …\nExtract an LEB128-encoded number from the start of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the connection should be considered dead. …\nTotal number of bytes that have been read from …\nSets <code>ReadWrite::wake_up_after</code> to <code>min(wake_up_after, after)</code>.\nIf <code>Some</code>, the socket must be waken up after the given <code>TNow</code> …\nSets <code>ReadWrite::wake_up_after</code> to the value in …\nList of buffers containing data to the written out. The …\nNumber of additional bytes that are allowed to be pushed …\nAmount of data already queued, both outside and including …\nCopies as much as possible from the content of <code>data</code> to …\nCopies as much as possible from the content of <code>data</code> to …\nAdds the <code>data</code> to <code>ReadWrite::write_buffers</code>, increases …\nConfiguration for <code>websocket_client_handshake</code>.\nNegotiated WebSocket connection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nValues to pass for the <code>Host</code> HTTP header. Example values …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSocket to negotiate WebSocket on top of.\nURL to pass to the server during the HTTP handshake. …\nNegotiates the WebSocket protocol (including the HTTP-like …\nSee <code>WithBuffers::read_write_access</code>.\nHolds an implementation of <code>AsyncRead</code> and <code>AsyncWrite</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a new <code>WithBuffers</code> with the given …\nReturns an object that implements <code>Deref&lt;Target = ReadWrite&gt;</code>…\nWaits until <code>WithBuffers::read_write_access</code> should be …\nBasic address book and slots assignments algorithm.\nEncoding and decoding of messages of the protocols used by …\nState machine of all networking connections.\nNo peer was found as all known un-assigned peers are …\nPeer was already banned.\nPeer was already banned.\nAddress was already known.\nAddress was already known.\nAn assignal peer was found. Note that the peer wasn’t …\nSee <code>BasicPeeringStrategy::pick_assignable_peer</code>.\nPeer was assigned to the given chain but didn’t have a …\nPeer wasn’t banned and is now banned.\nPeer wasn’t banned and is now banned.\nConfiguration passed to <code>BasicPeeringStrategy::new</code>.\nSee <code>BasicPeeringStrategy::decrease_address_connections</code>.\nPeer-chain association was already inserted.\nPeer was assigned to the given chain and had a slot.\nSee <code>BasicPeeringStrategy::increase_address_connections</code>.\nSee <code>BasicPeeringStrategy::insert_address</code>.\nSee <code>BasicPeeringStrategy::insert_chain_peer</code>.\nPeer-chain association has been successfully inserted.\nAddress has been successfully inserted.\nAddress has been inserted.\nNo un-assigned peer was found.\nPeer wasn’t assigned to the given chain.\nPeer wasn’t assigned to the given chain.\nThe address didn’t have any connection.\nSee <code>BasicPeeringStrategy::unassign_slot_and_ban</code>.\nSee …\nSee <code>BasicPeeringStrategy::unassign_slots_and_ban</code>.\nSee <code>BasicPeeringStrategy::unassign_slots_and_ban</code>.\nAddress isn’t known to the collection.\nThe peer isn’t associated to any chain, and as such the …\nAssigns a slot to the given peer on the given chain.\nReturns the list of all peers that are known to belong to …\nNumber of chains to initially reserve memory for.\nRemoves one connection from the given address.\nRemoves one connection from the given address. If this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> for <code>UnassignSlotAndBan::Banned</code> where <code>had_slot</code> …\nIncreases the number of connections of the given address. …\nInserts a new address for the given peer.\nInserts a chain-peer combination to the collection, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nCreates a new empty <code>BasicPeeringStrategy</code>.\nReturns the list of all addresses that have been inserted …\nNumber of peers, all chains together, to initially reserve …\nPicks an address from the list with zero connections, and …\nChooses a <code>PeerId</code> that is known to belong to the given …\nSeed used for the randomness for choosing peers and …\nRemoves all the chain assignments for the given chain.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nUnassign the slot that has been assigned to the given peer …\nRemoves a peer-chain associated previously inserted with …\nUnassigns all the slots that have been assigned to the …\nInstant when the first peer will be unbanned.\nIf the maximum number of addresses is reached, an old …\nIf the maximum number of addresses is reached, an old …\nIf the maximum number of peers is reached, an old peer …\n<code>true</code> if the ban has been extended, in other words if the …\n<code>true</code> if the peer had a slot on the chain.\nWhen the peer is unbanned.\n<code>Some</code> if the peer was banned. Contains the ban expiration.\n<code>true</code> if the ban has been extended, in other words if the …\n<code>true</code> if the peer had a slot on the chain.\nWhen the peer is unbanned.\nBlocks should be returned in ascending number, starting …\nAuthorities author blocks and participate in the consensus.\nError while parsing a <code>peer_id::PeerId</code> in the response.\nResponse isn’t a response to a find node request.\nResponse isn’t a response to a storage proof request.\nDecoded block announcement notification.\nError potentially returned by …\nDecoded handshake sent or received when opening a block …\nBlock sent in a block response.\nDescription of a block request that can be sent to a peer.\nWhich block the remote must return first.\nWhether the first block should be the one with the highest …\nWhich fields should be present in the response.\nDescription of a call proof request that can be sent to a …\nStart iterating at a key in a child trie.\nError potentially returned by …\nError potentially returned by <code>decode_block_request</code>.\nError potentially returned by <code>decode_block_response</code>.\nError potentially returned by <code>decode_find_node_response</code>.\nError potentially returned by <code>decode_grandpa_notification</code>.\nError potentially returned by …\nError potentially returned by <code>decode_identify_response</code>.\nError potentially returned by <code>decode_state_response</code>.\nError potentially returned by …\nBlocks should be returned in descending number, starting …\nFull nodes store the state of the chain. They are part of …\nResponse to a GrandPa warp sync request.\nResponse to a GrandPa warp sync request.\nHash of the block.\nDescription of a response to an identify request.\nBlock hash length isn’t correct.\nInvalid block number passed.\nValue in the direction field is invalid.\nHash length isn’t of the correct length.\nList of justifications isn’t in a correct format.\nCouldn’t decode the public key of the remote.\nSee <code>BlockData::justifications</code>.\nLight nodes are the lowest priority nodes.\nStart iterating at a key in the main trie.\nStart block field is missing.\nNumber of the block, where 0 would be the genesis block.\nFailed to decode response as a storage proof.\nError while decoding the Protobuf encoding.\nError while decoding the Protobuf encoding.\nError while decoding the Protobuf encoding.\nError while decoding the Protobuf encoding.\nError while decoding the Protobuf encoding.\nError while decoding the Protobuf encoding.\nError while decoding the Protobuf encoding.\nName of a protocol that is part of the Substrate/Polkadot …\nRole a node reports playing on the network.\nDescription of a state request that can be sent to a peer.\nSee <code>StateRequest::start_key</code>.\nPassed as parameter to …\nDescription of a storage proof request that can be sent to …\nRequested fields contains bits that are unknown.\nZero blocks requested.\nName and version of the software that responds. Similar to …\nAuthority that signed the pre-vote. Must be part of the …\nHash of the best block according to this node.\nHeight of the best block according to this node.\nHash of the block to make the request against.\nHash of the block to request the storage of.\nHash of the block to request the storage of.\nBlock body, if requested. Each item (each <code>Vec&lt;u8&gt;</code>) is a …\nBuilds the bytes corresponding to a block request.\nBuilds the bytes corresponding to a block response.\nBuilds the bytes corresponding to a call proof request.\nBuilds a wire message to send on the Kademlia …\nBuilds the bytes corresponding to a block request.\nBuilds the bytes corresponding to a state request.\nBuilds the bytes corresponding to a storage proof request.\nDecodes a block announcement.\nDecodes a SCALE-encoded block announces handshake.\nDecodes a blocks request.\nDecodes a response to a block request.\nDecodes a response to a request built using …\nAttempt to decode the given SCALE-encoded Grandpa …\nDecodes a SCALE-encoded GrandPa warp sync response.\nDecodes a response to an identify request.\nDecodes a protocol name into its components.\nDecodes a response to a state request.\nDecodes a response to a storage proof request or a call …\nNumber of blocks to request. The remote is free to return …\nWhether the first block should be the one with the highest …\nEd25519 public key of the local node.\nTurns a block announcement into its SCALE-encoding ready …\nTurns a block announces handshake into its SCALE-encoding …\nTurns a <code>ProtocolName</code> into its string version. Returns a …\nTurns a <code>ProtocolName</code> into a string.\nShort identifier of the consensus engine associated with …\nWhich fields should be present in the response.\nList of fragments that consist in the proof.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash of the genesis block according to this node.\nBlock hash.\nSCALE-encoded block header, if requested.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the block is the new best block of the announcer.\nIf <code>true</code>, the last fragment corresponds to the highest …\nBody of the justification.\nList of justifications, if requested and available.\nList of storage keys to query.\nList of multiaddresses the local node is listening on. …\nName of the runtime function to call.\nMultiaddress of the sender of the identify request, as …\nIterator to buffers of bytes to be concatenated then …\nName of the set of protocols supposed by the node.\nNames of the protocols supported by the local node.\nRole a node reports playing on the network.\nSCALE-encoded header in the announce.\nHeader of a block in the chain.\nJustification that proves the finality of …\nReturns the SCALE encoding of this enum. Always guaranteed …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nEd25519 signature made with …\nFirst block that the remote must return.\nResponse shouldn’t contain any key lexicographically …\nHash of the block concerned by the pre-vote.\nHeight of the block concerned by the pre-vote.\nKey of the child trie.\nKey within the child trie.\nData structure containing the k-buckets and the state of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nK-buckets are a collection used to store a partial view of …\nInitializes a new empty data structure with empty …\nK-bucket is full.\nK-bucket is full.\nError that can happen in <code>VacantEntry::insert</code>.\nSee <code>VacantEntry::insert</code>.\nK-buckets, as popularized by the Kademlia algorithm, and …\nRequested key is the same as local key. The local key is …\nCan’t insert the local key into the k-buckets.\nError that can happen in <code>Entry::or_insert</code>.\nReturns the list of entries in the k-buckets, ordered by …\nInserts or updates an entry in the buckets.\nEntry that was just inserted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value corresponding to the given key. Returns …\nReturns the value corresponding to the given key. Returns …\nInserts the entry in the vacant slot. Returns an error if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>self</code> is <code>Entry::Occupied</code>, returns the inner <code>OccupiedEntry</code>…\nIterates over all the peers in the k-buckets.\nIterates over all the peers in the k-buckets.\nReturns the local key that was passed to <code>KBuckets::new</code>.\nEntry that had to be removed in order to make space for …\nUpdates the state of this entry.\nError returned by <code>ChainNetwork::add_chain</code>.\nThere already is a pending or fully opened gossip link …\nError while decoding a received block announce.\nError while decoding the handshake of the block announces …\nError while decoding a received blocks request.\nError while decoding a received Grandpa notification.\nReceived an invalid identify request.\nReceived a new block announce from a peer.\nError returned by <code>ChainNetwork::start_blocks_request</code>.\nA remote has sent a request for blocks.\nError returned by <code>ChainNetwork::start_call_proof_request</code>.\nConfiguration for a specific overlay network.\nIdentifier of a chain added through <code>ChainNetwork::add_chain</code>…\nData structure containing the list of all connections and …\nError potentially returned by <code>ChainNetwork::gossip_close</code>.\nConfiguration for a <code>ChainNetwork</code>.\nError while decoding the response returned by the peer.\nFailed to decode the response.\nA connection has shut down after finishing its handshake.\nThe genesis hash and fork id are identical to the ones of …\nUndecoded but valid block announce.\nUndecoded but valid block announce handshake.\nUndecoded but valid GrandPa commit message.\nUndecoded but valid GrandPa warp sync response.\nUndecoded but valid Merkle proof.\nUndecoded but valid state response.\nEvent generated by <code>ChainNetwork::next_event</code>.\nMismatch between the genesis hash of the remote and the …\nError that can happen when trying to open an outbound …\nNow connected to the given peer for gossiping purposes.\nNo longer connected to the given peer for gossiping …\nA peer would like to open a gossiping link with the local …\nA previously-emitted <code>Event::GossipInDesired</code> is no longer …\nAn attempt has been made to open the given chain, but …\nReceived a GrandPa commit message from the network.\nReceived a GrandPa neighbor packet from the network. This …\nError returned by …\nError decoding the block announces handshake.\nA connection that was added with …\nA remote has sent a request for identification information.\nChain is still in use.\nError in an incoming substream.\nError during <code>ChainNetwork::start_kademlia_find_node_request</code>…\nNo healthy established connection is available to open the …\nThere is no valid connection to the given peer on which …\nThere is no valid connection to the given peer on which …\nThere is no valid substream to the given peer on which the …\nThere exists no outgoing nor ingoing attempt at a gossip …\nError potentially returned by <code>ChainNetwork::gossip_open</code>.\nThe ping of a connection has been measured.\nA connection has shut down before finishing its handshake.\nSee <code>Event::ProtocolError</code>.\nError in the protocol in a connection, such as failure to …\nQueue of notifications with that peer is full.\nError potentially returned when queueing a notification.\nThe remote is incapable of answering this specific request.\nThe remote is incapable of answering this specific request.\nError returned by <code>ChainNetwork::remove_chain</code>.\nError while waiting for the response from the peer.\nError during the request.\nA remote is no longer interested in the response to a …\nResponse to an outgoing request.\nAn outgoing request has finished, either successfully or …\nSize of the request is over maximum allowed by the …\nError potentially returned when starting a request.\nError potentially returned when starting a request that …\nError returned by <code>ChainNetwork::start_state_request</code>.\nError returned by <code>ChainNetwork::start_storage_proof_request</code>…\nError in the underlying protocol.\nAdds a chain to the list of chains that is handled by the …\nAdds a multi-stream connection to the state machine.\nAdds a single-stream connection to the state machine.\n<code>true</code> if incoming block requests are allowed.\nReturns the encoded bytes of the warp sync message.\nReturns the encoded bytes of the commit message.\nHash of the best block according to the local node.\nHeight of the best block according to the local node.\nReturns the value passed as <code>ChainConfig::block_number_bytes</code>…\nNumber of bytes of the block number in the networking …\nReturns the list of all the chains that have been added.\nCapacity to reserve for the list of chains.\nHeight of the highest block considered final by the node.\nReturns the list of <code>PeerId</code>s that are marked as desired, …\nReturns the remote address that was passed to …\nCapacity to initially reserve to the list of connections.\nReturns the decoded version of the handshake.\nReturns the decoded version of the announcement.\nReturns the SCALE-encoded Merkle proof.\nReturns the decoded version of the warp sync message.\nReturns the Merkle proof of the state response.\nReturns the decoded version of the commit message.\nOptional identifier to insert into the networking protocol …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash of the genesis block (i.e. block number 0) according …\nUpdate the state of the local node with regards to GrandPa …\nSwitches the gossip link to the given peer to the “closed…\nReturns the list of all peers for a <code>Event::GossipConnected</code> …\nReturns the list of gossip-desired peers for the given …\nReturns the number of gossip-desired peers for the given …\nMarks the given chain-peer combination as “desired”.\nReturns the list of all peers for a <code>Event::GossipConnected</code> …\nOpen a gossiping substream with the given peer on the …\nRemoves the given chain-peer combination from the list of …\nRemoves the given peer from the list of desired …\nSends a block announce gossip message to the given peer.\nSends a transaction gossip message to the given peer.\nIf <code>Some</code>, the chain uses the GrandPa networking protocol.\nAmount of time after which a connection hathat ndshake is …\nInjects into the state machine a message generated by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the encoded bytes of the commit message.\nReturns <code>true</code> if this is caused by networking issues, as …\nInitializes a new <code>ChainNetwork</code>.\nReturns the next event produced by the service.\nReturns the number of connections, both handshaking or …\nReturns the number of connections with the given peer.\nReturns the list of <code>PeerId</code>s for which a substream …\nReturns the list of <code>PeerId</code>s for which a substream …\nPulls a message that must be sent to a connection.\nSeed for the randomness within the networking state …\nRemoves a chain previously added with …\nResponds to a blocks request. Call this function in …\nResponds to an identify request. Call this function in …\nRole of the local node. Sent to the remote nodes and used …\nModifies the best block of the local node for the given …\nSet of authorities that will be used by the node to try …\nSends a blocks request to the given peer.\nSends a call proof request to the given peer.\nPanic\nSends a Kademlia find node request to the given peer.\nSends a state request to a peer.\nSends a storage request to the given peer.\nReturns the list of <code>PeerId</code>s that are desired (for any …\nOpaque data chosen by the API user. Can later be accessed …\nIdentifier of the chain that uses the same genesis hash …\nParameter that was passed to …\nParameter that was passed to …\nHash of the best block according to this node.\nHeight of the best block according to this node.\nChain of the gossip connection.\nChain of the gossip connection.\nChain of the gossip connection.\nChain of the gossip connection.\nChain of the gossip connection.\nIndex of the chain the request relates to.\nIndex of the chain the block relates to.\nIndex of the chain the message relates to.\nIndex of the chain the commit message relates to.\nIndex of the chain concerned by the request.\nInformation about the request.\nProblem that happened.\nError that happened.\nParameter that was passed to …\nParameter that was passed to …\nIdentifier of the connection.\nIdentifier of the connection.\nIdentifier of the connection.\nIdentifier of the connection.\nWhich kind of gossip link is concerned.\nWhich kind of gossip link is concerned.\nWhich kind of gossip link is concerned.\nWhich kind of gossip link is concerned.\nWhich kind of gossip link is concerned.\nActual <code>PeerId</code> of the connection.\nPeer that was connected.\n<code>PeerId</code> of the connection.\nPeer we are now connected to.\nPeer concerned by the event.\nPeer we are no longer connected to.\nPeer concerned by the event.\nPeer concerned by the event.\nPeer that has answered the request.\nIdentity of the sender of the block announce.\nIdentity of the sender of the message.\nIdentity of the sender of the message.\nPeer that has caused the protocol error.\nRemote that has sent the request.\nRemote that has sent the request.\nTime between sending the ping and receiving the pong.\nOutcome of the request.\nRole the node reports playing on the network.\nState of the remote.\nIdentifier of the request that was returned by the …\nIdentifier of the request. Necessary to send back the …\nIdentifier of the request. Necessary to send back the …\nIdentifier of the request.\nUser data that was passed to …\nUser data that was passed to …\nHash of the genesis block of the chain according to the …\nHash of the genesis block of the chain according to the …\nAll syncing strategies grouped together.\n<em>All-forks</em> header and body syncing.\nParachains and parathreads syncing.\nWarp syncing.\nOutcome of calling <code>AllSync::prepare_add_source</code>.\nSee <code>AddSource</code> and <code>AllSync::prepare_add_source</code>.\nSee <code>AddSource</code> and <code>AllSync::prepare_add_source</code>.\nSee <code>AddSource</code> and <code>AllSync::prepare_add_source</code>.\nAll blocks in the ancestry search response were already in …\nNo block ready to be processed.\nFinality proof concerns block that was already finalized.\nAnnounced block is already known by the state machine but …\nAnnounced block has already been successfully verified and …\nSee <code>BlockAnnounceOutcome</code> and <code>AllSync::block_announce</code>.\nSee <code>BlockAnnounceOutcome</code> and <code>AllForksSync::block_announce</code>.\nThe best block of the source has already been verified by …\nThe best block of the source is already known to this …\nOutcome of calling <code>AllSync::block_announce</code>.\nRequesting blocks from the source is requested.\nRequesting blocks from the source is requested.\nConfiguration for the <code>AllSync</code>.\nBlock uses a different consensus than the rest of the …\nSee <code>AllSync::desired_requests</code>.\nMessage has been silently discarded.\nHeader verification failed.\nInformation about the outcome of verifying a finality …\nProblem while verifying GrandPa commit.\nSee <code>AllSync::grandpa_commit_message</code>.\nGrandPa commit cannot be verified yet and has been stored …\nError that can happen when verifying a block header.\nOutcome of calling <code>BlockVerify::verify_header</code>.\nFailed to decode announce header.\nSee <code>BlockRequestSuccessBlock::scale_encoded_justifications</code>.\nProblem while verifying justification.\nProof verification successful. The block and all its …\nSource has given blocks that aren’t part of the …\nThe best block of the source is older or equal to the …\nRequest was no longer interesting for the state machine.\nOutcome of calling <code>AllSync::process_one</code>.\nContent of the response has been queued and will be …\nMessage has been queued for later verification.\nSee <code>AllSync::desired_requests</code>.\nIdentifier for a request in the <code>AllSync</code>.\nOutcome of injecting a response in the <code>AllSync</code>.\nSending a call proof query is requested.\nSending a call proof query is requested.\nIdentifier for a source in the <code>AllSync</code>.\nStatus of the synchronization.\nSending a storage query is requested.\nSending a storage query is requested.\nHeader has been successfully verified.\nRegular syncing mode.\nAnnounced block is too old to be part of the finalized …\nAnnounced block isn’t in the state machine.\nThe best block of the source isn’t in this state machine …\nBlock can’t be verified as it uses an unknown consensus …\nThe block verification has failed. The block is invalid …\nReady to start verifying a block.\nReady to start verifying a proof of finality.\nReady to start verifying a warp sync fragment.\nSending a Grandpa warp sync request is requested.\nSending a Grandpa warp sync request is requested.\nBuilding the chain information is necessary for the warp …\nBuilding the chain information is necessary in order for …\nCompiling a new runtime is necessary for the warp sync …\nBuilding the runtime is necessary in order for the warp …\nWarp syncing algorithm has reached the head of the …\nResponse has made it possible to finish warp syncing.\nWarp syncing algorithm is downloading Grandpa warp sync …\nResponse to a GrandPa warp sync request.\nInserts a new request in the data structure.\nInserts the source, and the best block if it is unknown.\nInserts a new source in the state machine.\nInserts a new source in the state machine.\nInserts a new source in the state machine, plus the best …\nIf <code>false</code>, blocks containing digest items with an unknown …\nBuilds a <code>chain_information::ChainInformationRef</code> struct …\nReturns consensus information about the current best block …\nReturns the hash of the best block.\nReturns the header of the best block.\nReturns the number of the best block.\nInjects a block announcement made by a source into the …\nHash of the block.\nReturns the value that was initially passed in …\nNumber of bytes used when encoding/decoding the block …\nPre-allocated capacity for the number of blocks between …\nInject a response to a previously-emitted blocks request.\nBuilds the runtime.\nBuilds the chain information.\nInject a response to a previously-emitted call proof …\nCancel the block verification.\nInformation about the latest finalized block and its …\nKnown valid Merkle value and storage value combination for …\nReturns the details of a request to start towards a source.\nNumber of blocks to download ahead of the best verified …\nIf <code>true</code>, all the storage proofs and call proofs necessary …\nIf true, the body of a block is downloaded (if necessary) …\nShort identifier of the consensus engine associated with …\nReturns the hash of the finalized block.\nReturns the header of the finalized block.\nReturns the height of the finalized block.\nFinish inserting the block header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUpdate the state machine with a Grandpa commit message …\nInject a response to a previously-emitted GrandPa warp …\nReturns the hash of the announced block.\nReturns the hash of the announced block.\nReturns the hash of the block to be verified.\nReturns the hash of the block that was verified.\nHeader of the block.\nReturns the height of the announced block.\nReturns the height of the announced block.\nReturns the height of the block that was verified.\nInserts the block in the state machine and keeps track of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it is believed that we are near the head …\nBody of the justification.\nReturns the list of sources for which …\nMaximum number of blocks of unknown ancestry to keep in …\nMaximum number of simultaneous pending requests made …\nInitializes a new state machine.\nReturns the header of all known non-finalized blocks in …\nReturns the header of all known non-finalized blocks in …\nReturns a list of requests that are considered obsolete …\nReturns the parent hash of the announced block.\nReturns the parent hash of the announced block.\nReturns the hash of the parent of the block that was …\nReturns the SCALE-encoded header of the parent of the …\nReturns the user data of the parent of the block to be …\nPerform the verification.\nPerform the verification.\nStart the process of adding a new source to the sync state …\nProcess the next block in the queue of verification.\nReturns the identifier and user data of the source that …\nReject the block and mark it as bad.\nRemoves the given request from the state machine. Returns …\nRemoves a source from the state machine. Returns the user …\nReturns the <code>SourceId</code> that is expected to fulfill the given …\nReturns the list of SCALE-encoded extrinsics of the block …\nReturns the list of SCALE-encoded extrinsics of the block …\nReturns the SCALE-encoded header of the block about to be …\nReturns the SCALE-encoded header of the block that was …\nHeader of a block in the chain.\nJustification that proves the finality of …\nReturns the source the justification was obtained from.\nReturns the current best block of the given source.\nReturns true if the source has earlier announced the block …\nReturns the number of ongoing requests that concern this …\nReturns the list of sources in this state machine.\nPre-allocated capacity for the number of block sources.\nReturns the current status of the syncing.\nInject a response to a previously-emitted storage proof …\nTry register a new block that the source is aware of.\nUpdates the state machine to keep track of the fact that …\nUpdate the finalized block height of the given source.\nUser data associated to the block.\nGives access to the user data of the block.\nGives access to the user data of the block.\nVerify the header of the block.\nHeight of the announced block.\nHeight of the currently finalized block.\nHash of the block whose storage is requested.\nHash of the block whose call is made against.\nHash of the first block to request.\nHeight of the first block to request.\nName of the function to be called.\nKeys whose values is requested.\nNumber of blocks the request should return.\nConcatenated SCALE-encoded parameters to provide to the …\n<code>True</code> if bodies should be included in the response.\n<code>True</code> if headers should be included in the response.\n<code>True</code> if the justification should be included in the …\nMerkle value of the root of the storage trie of the block.\nHash of the known finalized block. Starting point of the …\nList of finalized blocks, in decreasing block number.\nList of hashes of blocks that are no longer descendant of …\nIf <code>true</code>, this operation modifies the best block of the …\nError that happened.\nTrue if the newly-verified block is considered the new …\nState machine yielded back. Use to continue the processing.\nRuntime of the newly finalized block.\nSCALE-encoded extrinsics of the finalized block. The …\nStorage value at the <code>:code</code> key of the finalized block.\nClosest ancestor of the <code>:code</code> trie node of the finalized …\nMerkle value of the <code>:code</code> trie node of the finalized block.\nStorage value at the <code>:heappages</code> key of the finalized block.\nHash of the block whose storage is requested.\nHash of the block whose call is made against.\nHash of the first block to request.\nHeight of the first block to request.\nName of the function to be called.\nKeys whose values is requested.\nNumber of blocks the request should return.\nConcatenated SCALE-encoded parameters to provide to the …\n<code>True</code> if bodies should be included in the response.\n<code>True</code> if headers should be included in the response.\n<code>True</code> if the justification should be included in the …\nHash of the known finalized block. Starting point of the …\nList of block headers that were pending verification and …\nHash of the highest block that is proven to be finalized.\nHash of the highest block that is proven to be finalized.\nHeight of the block indicated by …\nHeight of the block indicated by …\nSource from which the fragments are currently being …\nResult of calling <code>FinishRequest::add_block</code>.\nSee <code>FinishRequest::add_block</code> and <code>AddBlock</code>.\nSee <code>FinishRequest::add_block</code> and <code>AddBlock</code>.\nOutcome of calling <code>AllForksSync::prepare_add_source</code>.\nSee <code>AddSource</code> and <code>AllForksSync::prepare_add_source</code>.\nSee <code>AddSource</code> and <code>AllForksSync::prepare_add_source</code>.\nSee <code>AddSource</code> and <code>AllForksSync::prepare_add_source</code>.\nNo processing is necessary.\nFinality proof concerns block that was already finalized.\nThe block is already in the list of verified blocks.\nThe block is already in the list of unverified blocks.\nAnnounced block is already known by the state machine but …\nAnnounced block has already been successfully verified and …\nError when adding a block using <code>FinishRequest::add_block</code>.\nSee <code>BlockAnnounceOutcome</code> and <code>AllForksSync::block_announce</code>.\nSee <code>BlockAnnounceOutcome</code> and <code>AllForksSync::block_announce</code>.\nThe best block of the source has already been verified by …\nThe best block of the source is already known to this …\nOutcome of calling <code>AllForksSync::block_announce</code>.\nBlock verification to be performed.\nA block is ready for verification.\nConfiguration for the <code>AllForksSync</code>.\nBlock uses a different consensus than the rest of the …\nHeader verification failed.\nList of SCALE-encoded extrinsics doesn’t match the …\nFinality proof verification to be performed.\nA justification is ready for verification.\nInformation about the outcome of verifying a finality …\nSee <code>AllForksSync::finish_request</code>.\nProblem while verifying GrandPa commit.\nSee <code>AllForksSync::grandpa_commit_message</code>.\nGrandPa commit cannot be verified yet and has been stored …\nError that can happen when verifying a block header.\nOutcome of calling <code>BlockVerify::verify_header</code>.\nHeader verification successful.\nFailed to decode announce header.\nFailed to decode block header.\nProblem while verifying justification.\nVerification successful. The block and all its ancestors …\nThe block height is equal to the locally-known finalized …\nThe best block of the source is older or equal to the …\nFailed to parse message. Commit has been silently …\nState of the processing of blocks.\nMessage has been queued for later verification.\nSee <code>FinalityProofVerifyOutcome</code>.\nIdentifier for a request in the <code>super::AllForksSync</code>.\nInformation about a blocks request to be performed on a …\nHeader has been successfully verified.\nAnnounced block is too old to be part of the finalized …\nHeight of the block is below the height of the finalized …\nProvided block isn’t a block that we expect to be added.\nAnnounced block isn’t in the state machine.\nThe best block of the source isn’t in this state machine …\nThe block hasn’t been heard of before.\nBlock can’t be verified as it uses an unknown consensus …\nThe block verification has failed. The block is invalid …\nAdds a block coming from the response that the source has …\nRegisters a new block that the source is aware of.\nInserts a new request in the data structure.\nInserts a new source in the state machine.\nInserts a new source in the state machine.\nInserts a new source in the state machine, plus the best …\nIf <code>false</code>, blocks containing digest items with an unknown …\nBuilds a <code>chain_information::ChainInformationRef</code> struct …\nReturns the hash of the best block.\nReturns the header of the best block.\nReturns the number of the best block.\nUpdate the source with a newly-announced block.\nHash of the block.\nHeight of the block.\nReturns the value that was initially passed in …\nNumber of bytes used when encoding/decoding the block …\nPre-allocated capacity for the number of blocks between …\nDo not actually proceed with the verification.\nCancel the block verification.\nDo not actually proceed with the verification.\nInformation about the latest finalized block and its …\nReturns the details of a request to start towards a source.\nIf true, the body of a block is downloaded (if necessary) …\nReturns the hash of the finalized block.\nReturns the header of the finalized block.\nReturns the height of the finalized block.\nNotifies of the end of the response, and returns back the …\nFinish inserting the block header.\nCall in response to a request being successful or failing.\nHash of the first block to request.\nHeight of the first block to request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUpdate the state machine with a Grandpa commit message …\nReturns the hash of the announced block.\nReturns the hash of the announced block.\nReturns the hash of the block to be verified.\nReturns the hash of the block that was verified.\nReturns the height of the announced block.\nReturns the height of the announced block.\nReturns the height of the block that was verified.\nInsert the block in the state machine, with the given user …\nInserts the block in the state machine and keeps track of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the list of sources for which …\nMaximum number of blocks of unknown ancestry to keep in …\nMaximum number of simultaneous pending requests made …\nInitializes a new <code>AllForksSync</code>.\nReturns the header of all known non-finalized blocks in …\nReturns the header of all known non-finalized blocks in …\nNumber of blocks the request should return.\nReturns a list of requests that are considered obsolete …\nReturns the parent hash of the announced block.\nReturns the parent hash of the announced block.\nReturns the hash of the parent of the block that was …\nReturns the SCALE-encoded header of the block that was …\nReturns the user data of the parent of the block to be …\nPerform the verification.\nStarts the process of inserting a new source in the …\nProcess the next block in the queue of verification.\nReject the block and mark it as bad.\nRemoves the source from the <code>AllForksSync</code>.\nReplace the existing user data of the block.\nReturns the <code>SourceId</code> that is expected to fulfill the given …\nReturns the list of SCALE-encoded extrinsics of the block …\nReturns the list of SCALE-encoded extrinsics of the block …\nReturns the SCALE-encoded header of the block about to be …\nReturns the SCALE-encoded header of the block that was …\nSCALE-encoded header of the block.\nReturns the source the justification was obtained from.\nReturns the current best block of the given source.\nReturns true if the source has earlier announced the block …\nReturns the number of ongoing requests that concern this …\nCollection of sources used for the <code>all_forks</code> syncing.\nReturns the list of sources in this state machine.\nPre-allocated capacity for the number of block sources.\nUpdates the state machine to keep track of the fact that …\nUpdate the finalized block height of the given source.\nUser data that was associated with that block.\nGives access to the user data of the block.\nGives access to the user data of the block.\nGives access to the user data of the block.\nPerform the verification.\nList of block headers that were pending verification and …\nHeight of the announced block.\nHeight of the currently finalized block.\nList of finalized blocks, in decreasing block number.\nList of blocks that aren’t descendant of the latest …\nIf <code>true</code>, this operation modifies the best block of the …\nError that happened.\nTrue if the newly-verified block is considered the new …\nState machine yielded back. Use to continue the processing.\nThe state machine. The <code>AllForksSync::process_one</code> method …\nCollection of sources and which blocks they know about.\nIdentifier for a source in the <code>AllForksSources</code>.\nRegisters a new block that the source is aware of.\nRegisters a new block that the source is aware of and sets …\nAdd a new source to the container.\nReturns the current best block of the given source.\nRemove all the sources.\nReturns <code>true</code> if the <code>SourceId</code> is present in the collection.\nReturns the finalized block height this state machine …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the data structure is empty.\nReturns the list of all <code>SourceId</code>s.\nReturns the list of sources for which …\nReturns the number of sources in the data structure.\nCreates a new container. Must be passed the height of the …\nReturns the number of unique blocks in the data structure.\nRemoves the source from the <code>AllForksSources</code>.\nRemoves a block from the list of blocks the sources are …\nUpdates the height of the finalized block.\nReturns true if <code>AllForksSources::add_known_block</code> or …\nRemoves a block from the list of blocks the source is …\nReturns the list of all user datas of all sources.\nError that can happen during the decoding.\nThe core was not occupied to begin with.\nThe candidate occupying the core was made available and …\nAn assumption being made about the state of an occupied …\nName of the runtime function to call in order to obtain …\nDecoded persisted validation data.\nThe candidate occupying the core timed out and freed the …\nAttempt to decode the return value of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum legal size of a POV block, in bytes.\nOpaque data representing the best block (or similar …\nProduces the input to pass to the …\nReturns the SCALE encoding of this type.\nA block body download should be started.\nSee <code>DesiredRequest::BlockBodyDownload</code>.\nDownloaded block body doesn’t match the expected …\nHeader does not actually advance the warp syncing process. …\nReady to verify the parameters of the chain against the …\nReady to verify the parameters of the chain against the …\nProblem encountered during a call to …\nReady to build the runtime of the finalized chain.\nReady to build the runtime of the chain..\nProblem encountered during a call to <code>BuildRuntime::build</code>.\nWarp syncing algorithm has reached the head of the …\nError building the chain information.\nThe configuration for <code>start_warp_sync()</code>.\nSee <code>Config::code_trie_node_hint</code>.\nInformation about a request that the warp sync state …\nWarp sync proof is empty.\nWarp syncing algorithm is downloading Grandpa warp sync …\nNothing to verify at the moment. The state machine is …\nFailed to decode header.\nThe storage item at <code>:heappages</code> is in an incorrect format.\nFailed to decode justification.\nFailed to verify Merkle proof.\nJustification found within the fragment is invalid.\nSmallest possible <code>SourceId</code>. It is always inferior or equal …\nMerkle proof is missing the necessary entries.\nThe chain doesn’t include any storage item at <code>:code</code>.\nWarp sync fragment doesn’t contain an authorities list …\nChain doesn’t use the Grandpa finality algorithm.\nReturn value of <code>WarpSync::process_one</code>.\nInformation about a request to add to the state machine.\nIdentifier for a request in the warp sync state machine.\nError building the runtime of the chain.\nA call proof should be started.\nSee <code>DesiredRequest::RuntimeCallMerkleProof</code>.\nIdentifier for a source in the <code>WarpSync</code>.\nProblem encountered during a call to <code>BuildRuntime::build</code> or\nSource that has sent a proof didn’t behave properly.\nSource that has sent a proof didn’t behave properly.\nSee <code>SourceMisbehavior::error</code>.\nSee <code>WarpSync::status</code>.\nA storage request of the runtime code and heap pages …\nSee <code>DesiredRequest::StorageGetMerkleProof</code>.\nMismatch between the block targeted by the justification …\nChain uses an unrecognized consensus mechanism.\nError potentially returned by …\nReady to verify a warp sync fragment.\nReady to verify a warp sync fragment.\nWarp syncing process state machine.\nFragment to be verified.\nError potentially returned by <code>start_warp_sync()</code>.\nA warp sync request should be started.\nSee <code>DesiredRequest::WarpSyncRequest</code>.\nInserts a new request in the data structure.\nAdd a source to the list of sources.\nReturns the chain information that is considered verified.\nReturns the value that was initially passed in …\nNumber of bytes used when encoding/decoding the block …\nInjects a body download and removes the given request from …\nBuild the runtime of the chain.\nBuild the information about the chain.\nClosest ancestor of the <code>:code</code> key except for <code>:code</code> itself.\nKnown valid Merkle value and storage value combination for …\nReturns a list of requests that should be started in order …\nIf <code>true</code>, all the storage proofs and call proofs necessary …\nIf <code>true</code>, the body of the warp sync target will be …\nError that the source made.\nList of SCALE-encoded extrinsics of the body of the …\nThe runtime constructed in <code>VirtualMachineParamsGet</code>. …\nStorage value at the <code>:code</code> key of the finalized block.\nClosest ancestor of the <code>:code</code> trie node of the finalized …\nMerkle value of the <code>:code</code> trie node of the finalized block.\nStorage value at the <code>:heappages</code> key of the finalized block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPotential Merkle value of the <code>:code</code> key.\nNumber of warp sync fragments after which the state …\nStart processing one CPU operation.\nReturns the source that has sent the fragments that we are …\nRemoves the given request from the state machine. Returns …\nRemoves a source from the list of sources. In addition to …\nReturns the <code>SourceId</code> that is expected to fulfill the given …\nThe initial capacity of the list of requests.\nInjects a response and removes the given request from the …\nHeader of a block in the chain.\nJustification that proves the finality of …\nModifies the chain information known to be valid.\nSets the finalized block height of the given source.\nGets the finalized block height of the given source.\nSource that committed the felony. <code>None</code> if the source has …\nReturns the number of ongoing requests that concern this …\nReturns a list of all known sources stored in the state …\nThe initial capacity of the list of sources.\nThe chain information of the starting point of the warp …\nInitializes the warp sync state machine.\nReturns the current status of the warp syncing.\nInjects a Merkle proof and removes the given request from …\nStorage value corresponding to …\nVerify one warp sync fragment.\nIf the height of the current local finalized block is <code>N</code>, …\nInjects a response and removes the given request from the …\nStarting point of the warp syncing. The first fragment of …\nHash of the block whose body to download.\nHash of the block to request the parameters against.\nHash of the header of the block the call should be made …\nHeight of the block whose body to download.\nExtrinsics trie root hash found in the header of the block.\nName of the function of the call proof.\nKeys whose values are requested.\nParameters of the call.\nState trie root hash found in the header of the block.\nSee <code>DesiredRequest::WarpSyncRequest::block_hash</code>.\nSee <code>DesiredRequest::BlockBodyDownload::block_hash</code>.\nSee <code>DesiredRequest::StorageGetMerkleProof::block_hash</code>.\nSee <code>DesiredRequest::RuntimeCallMerkleProof::block_hash</code>.\nSee <code>DesiredRequest::BlockBodyDownload::block_number</code>.\nSee <code>DesiredRequest::RuntimeCallMerkleProof::function_name</code>.\nSee <code>DesiredRequest::StorageGetMerkleProof::keys</code>.\nSee …\nHash of the highest block that is proven to be finalized.\nHash of the highest block that is proven to be finalized.\nHeight of the block indicated by …\nHeight of the block indicated by …\nSource from which the fragments are currently being …\nHash of the header.\nHeight of the header.\nHash of the block the justification targets.\nHeight of the block the justification targets.\nTransactions pool specialized for light clients usage.\nGeneral-purpose transactions pool.\nRuntime call to obtain the transactions validity status.\nConfiguration for <code>LightPool::new</code>.\nData structure containing transactions. See the …\nSee <code>LightPool::prune_finalized_with_body</code>.\nSee <code>PruneBodyFinalized</code>.\nSee <code>LightPool::set_best_block</code>.\nIdentifier of a transaction stored within the <code>LightPool</code>.\nAdds a block to the collection of blocks.\nInserts a new unverified transaction in the pool.\nReturns the hash of the best block.\nHash of the finalized block.\nReturns the user data associated with a given block.\nReturns the user data associated with a given block.\nNumber of blocks to initially allocate memory for.\nHash of the finalized block at initialization.\nTries to find the transactions in the pool whose bytes are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the block with the given hash is present …\nId of this transaction in the state machine.\nList of transactions that were included in this block, …\nList of transactions that weren’t included in a block of …\nIndex of the transaction within the finalized block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of transactions which have been validated …\nReturns a list of transactions which have been validated …\nReturns <code>true</code> if the given transaction has been included in …\nReturns <code>true</code> if the given transaction has been …\nReturns the list of blocks whose bodies aren’t present …\nInitializes a new transactions pool.\nReturns the number of transactions in the pool.\nReturns the number of blocks between the oldest block …\nRemoves from the pool as many blocks as possible from the …\nRemoves from the pool the transaction with the given …\nList of transactions that were included in a block of the …\nReturns the bytes associated with a given transaction.\nSCALE-encoded transaction.\nSets the passed block as the new best block of the chain.\nSets the list of single-SCALE-encoded transactions that …\nSets the finalized block of the chain.\nSets the outcome of validating the transaction with the …\nReturns the user data associated with a given transaction.\nReturns the user data associated with a given transaction.\nNumber of transactions to initially allocate memory for.\nReturns the list of all transactions within the pool.\nReturns the list of all transactions within the pool.\nReturns a list of transactions whose state is “not …\nUser data associated to this block.\nOpaque user data that was insert alongside with the …\nSee <code>Pool::best_block_add_transaction_by_scale_encoding</code>.\nConfiguration for <code>Pool::new</code>.\nTransaction to add is present in the list of non-included …\nData structure containing transactions. See the …\nIdentifier of a transaction stored within the <code>Pool</code>.\nTransaction to add isn’t in the list of non-included …\nSee <code>AppendBlockTransaction::Unknown</code>.\nInserts a new non-validated transaction in the pool.\nAdds a block to the chain tracked by the transactions pool.\nAdds a transaction to the block being appended.\nAdds a single-SCALE-encoded transaction to the highest …\nReturns the best block height according to the pool.\nReturns all the transactions that can be included in the …\nNumber of transactions to initially allocate memory for.\nHeight of the finalized block at initialization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the block height at which the given transaction …\nInserts the transaction in the pool.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the pool is empty.\nReturns the list of all transactions within the pool.\nReturns the list of all transactions within the pool.\nReturns the number of transactions in the pool.\nInitializes a new transactions pool.\nSeed for randomness used to avoid HashDoS attacks.\nRemoves from the pool the transaction with the given …\nRemoves from the pool all the transactions that are …\nPop a certain number of blocks from the list of blocks.\nReturns the bytes associated with a given transaction.\nSets the outcome of validating the transaction with the …\nFinds the transactions in the pool whose bytes are …\nReturns a list of transactions whose state is “not …\nIdentifier of the non-included transaction with the same …\nUser data stored alongside with that transaction.\nThe transaction birth block is ancient.\nAn extrinsic with a Mandatory dispatch resulted in Error. …\nGeneral error to do with the transaction’s proofs (e.g. …\nThe call of the transaction is not expected.\nCould not lookup some information that is required to …\nAny other custom invalid validity that is not covered by …\nAny other custom unknown validity that is not covered by …\nError that can happen during the decoding.\nThe transaction would exhaust the resources of current …\nTransaction has been received externally.\nGeneral error to do with the transaction not yet being …\nTransaction is already included in a block.\nThe transaction is invalid.\nAn invalid transaction validity.\nTransaction is coming from a local source.\nA transaction with a mandatory dispatch. This is invalid; …\nNo validator found for the given unsigned transaction.\nGeneral error to do with the inability to pay some fees …\nGeneral error to do with the transaction being outdated …\nSource of the transaction.\nErrors that can occur while checking the validity of a …\nTransaction validity can’t be determined.\nAn unknown transaction validity.\nName of the runtime function to call in order to validate …\nInformation concerning a valid transaction.\nAttempt to decode the return value of the  …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransaction longevity.\nPriority of the transaction.\nA flag indicating whether the transaction should be …\nTags provided by the transaction.\nTransaction dependencies.\nProduces the input to pass to the …\nProduces the input to pass to the …\nTurns an iterator of bytes into an iterator of nibbles …\nMerkle value of the root node of an empty trie using …\nMerkle value of the root node of an empty trie using …\nHash algorithm used during trie calculations.\nA single nibble with four bits.\nError when building a <code>Nibble</code> from a <code>u8</code>.\nThe integer value is too large.\nThe format of the nodes of trie has two different versions.\nReturns an iterator of all possible nibble values, in …\nAllows searching for the closest branch node in a trie …\nTurns an iterator of bytes into an iterator of nibbles …\nFreestanding function that calculates the root of a …\nAdd the given number to the nibble. Returns <code>None</code> on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an ASCII headecimal digit (i.e. <code>0..9</code>, <code>a..f</code>, <code>A..F</code>) …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns the equivalent of <code>Nibble::try_from(15).unwrap()</code>. …\nTurns an iterator of nibbles into an iterator of bytes.\nTurns an iterator of nibbles into an iterator of bytes.\nTurns an iterator of nibbles into an iterator of bytes.\nReturns the Merkle value of a trie containing the entries …\nScanning, through trie proofs, the list of all keys that …\nDecodes and verifies a trie proof.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns the Merkle value of a trie containing the entries …\nManages the structure of a trie. Allows inserting and …\nReturns the equivalent of <code>Nibble::try_from(0).unwrap()</code>.\nProgress in the search algorithm.\nImplementation of <code>Iterator&lt;Item = Nibble&gt;</code>. See …\nConfiguration for <code>start_branch_search</code>.\nSearch has finished successfully.\nIn order to continue, the API user must indicate the trie …\nIn order to continue, the API user must indicate the trie …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicate the key. <code>None</code> must be passed if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nThe API user must provide the trie node with a storage …\nThe search will try to find the closest node whose key is …\nIf <code>true</code>, only return nodes that have a storage value …\nIf <code>true</code>, if the key returned by <code>NextKey::key_before</code> …\nIf <code>true</code>, also include the node whose key is equal to …\nThe API user must indicate a key that starts with the …\nOnly search nodes whose key starts with the list of …\nStart the search algorithm.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nResult of the search. <code>None</code> if there is no branch/storage …\nThe calculation is finished.\nRequest to return the key that follows (in lexicographic …\nRequest to return the key that follows (in lexicographic …\nCurrent state of the <code>RootMerkleValueCalculation</code> and how to …\nRequest the value of the node with a specific key. Call …\nRequest the value of the node with a specific key. Call …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates the storage value and advances the calculation.\nInjects the key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the key whose value is being requested.\nReturns the key whose next key must be passed back.\nIf <code>true</code>, then the provided value must the one superior or …\nReturns the prefix the next key must start with. If the …\nStart calculating the Merkle value of the root node.\nRoot hash that has been calculated.\nProof doesn’t contain enough information and isn’t …\nDesired key can’t be found in the proof.\nError potentially returned by <code>minimize_proof</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMerges multiple proofs into a single one, removing common …\nMinimizes a single-key proof, removing all entries that …\nConfiguration to pass to <code>prefix_scan</code>.\nPossible error returned by <code>PrefixScan::resume_all_keys</code> or …\nOnly the hash of the value was found in the proof.\nScan must continue with the next storage proof query.\nThe proof has an invalid format.\nOne or more entries in the proof are missing.\nScan of a prefix in progress.\nOutcome of calling <code>PrefixScan::resume_all_keys</code> or …\nStorage value of a trie entry. See …\nScan has succeeded.\nValue was found in the proof.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf <code>true</code>, then the final result will only contain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrefix that all the keys must share.\nStart a new scanning process.\nReturns whether the storage proof must include the storage …\nReturns the list of keys whose storage proof must be …\nInjects the proof presumably containing the keys returned …\nInjects the proof presumably containing the keys returned …\nMerkle value (or node value) of the root node of the trie.\nList of entries who key starts with the requested prefix.\nValue that was passed as …\nChild exists but isn’t present in the proof.\nInformation about a specific child in the list of children.\nSee <code>TrieNodeInfo::children</code>.\nConfiguration to pass to <code>decode_and_verify_proof</code>.\nDecoded Merkle proof. The proof is guaranteed valid.\nThe same entry has been found multiple times in the proof.\nIdentifier for an entry within a decoded proof.\nPossible error returned by <code>decode_and_verify_proof</code>.\nThe hash of the storage value was found, but the un-hashed …\nChild exists and can be found in the proof.\nProof doesn’t contain enough information to answer the …\nProof is in an invalid format.\nThe storage value was found in the proof.\nChild doesn’t exist.\nThe node doesn’t have a storage value.\nProof is in an invalid format.\nInformation about an entry in the proof.\nStorage value of the node.\nInformation about a node of the trie.\nOne of the entries of the proof is disconnected from the …\nReturns the information about the child in the given …\nReturns an iterator of 16 items, one for each child.\nWhich children the node has.\nReturns the key of the closest ancestor to the given key …\nFind in the proof the closest trie node that descends from …\nVerifies whether a proof is correct and returns an object …\nDecomposes the given proof into its entries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if a child in the direction of the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns a list of all elements of the proof, ordered by …\nReturns a list of all elements of the proof, ordered by …\nThe trie node key.\nReturns the Merkle value of this child. <code>None</code> if the child …\nMerkle value of that proof entry.\nFind in the proof the trie node that follows <code>key_before</code> in …\nNode value of that proof entry.\nPartial key of that proof entry.\nList of node values of nodes found in the trie. At least …\nReturns the <code>ProofEntry</code> of the given key.\nQueries from the proof the storage value at the given key.\nStorage value of the node, if any.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns information about a trie node.\nInformation about the node of the trie associated to this …\nHash of the root of the trie the key is in.\nReturns the <code>ProofEntry</code> of the proof entry whose Merkle …\nIf <code>ProofEntry::node_value</code> indicates that the storage value …\nKey of the child. Always starts with the key of its parent.\nMerkle value of the child.\nMerkle value of the child.\n<code>true</code> if the storage value was inline in the node. This …\nThe storage value.\nA single nibble with four bits.\nPrototype for a Merkle proof whose building is in progress.\nBuilds the Merkle proof.\nSimilar to <code>ProofBuilder::build</code>, but returns a <code>Vec</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nModifies the node values that have been inserted in the …\nReturns a list of keys for which the node value must be …\nInitializes a new empty proof builder.\nInserts the node value of a given trie node into the …\nReturns the hash of the trie root node.\nInitializes a new empty proof builder.\nError while decoding length of child.\nChild value is superior to 32 bytes.\nEnd of data within the children bitmap.\nNode value ends within a child value.\nDecoded node value. Returned by <code>decode</code> or passed as …\nIterator to the nibbles of the partial key. See …\nNode value is empty.\nNode value indicates that it is the root of an empty trie …\nError potentially returned by <code>encode</code>.\nPossible error returned by <code>decode</code>.\nHash of the storage value of the item is present in the …\nBits in the header have an invalid format.\nIf partial key is of uneven length, then it must be padded …\nOutput of the calculation.\nItem doesn’t have any storage value.\nNodes that have no children nor storage value are invalid …\nLength of partial key is too large to be reasonable.\nNode value ends while parsing partial key length.\nNode value ends within partial key.\nSee <code>Decoded::storage_value</code>.\nError while decoding length of storage value.\nNode value ends within the storage value.\nNode value is longer than expected.\nStorage value of the item is present in the node value.\nThe children bitmap is equal to 0 despite the header …\nCalculates the Merkle value of the given node.\nAll 16 possible children. <code>Some</code> if a child is present, and …\nReturns a bits map of the children that are present, as …\nDecodes a node value found in a proof into its components.\nEncodes the components of a node value into the node value …\nEncodes the components of a node value into the node value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a <code>MerkleValueOutput</code> from a slice of bytes.\nReturns a <code>DecodedPartialKey</code> iterator that produces the …\nEquivalent to <code>DecodedPartialKey::from_bytes</code>, but skips the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nIterator to the nibbles of the partial key of the node.\nStorage value of this node.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nRemoving the storage value removed two nodes from the …\nAccess to a node within the <code>TrieStructure</code> that is known to …\nAccess to a entry for a potential node within the …\nAccess to a node within the <code>TrieStructure</code>.\nIndex of a node in the trie. Never invalidated, except …\nThere exists a node with this key.\nOne node will be inserted in the trie.\nPreparation for a new node insertion.\nOne node will be inserted in the trie.\nTwo nodes will be inserted in the trie.\nOutcome of the removal of a storage value.\nRemoving the storage value removed the node that contained …\nRemoving the storage value removed the node that contained …\nAccess to a node within the <code>TrieStructure</code> that is known to …\nRemoving the storage value didn’t change the structure …\nThe trie was empty apart from this node. It is now …\nStores the structure of a trie, including branch nodes …\nTwo nodes will be inserted in the trie.\nAccess to a non-existing node within the <code>TrieStructure</code>.\nThis entry is vacant.\nKey of the branch node that will be inserted.\nReturns the number of nodes (storage or branch nodes) the …\nReturns the child of this node at the given index.\nReturns the child of this node at the given index.\nReturns the child of this node at the given index.\nReturns the user data of the child at the given index.\nReturns the user data of the child at the given index.\nReturns the user data of the child at the given index.\nReturns the node with the given key, or <code>None</code> if no such …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the full key of the node.\nReturns the full key of the node.\nReturns the full key of the node.\nReturns true if the node has a storage value associated to …\nInsert the new node. <code>branch_node_user_data</code> is discarded if …\nInsert the new node.\nInsert the new node.\nAdds a storage value to this node, turning it into a …\nPrepare the operation of creating the node in question.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the child of this node given the given index.\nReturns the child of this node given the given index.\nReturns the child of this node given the given index.\nReturns the first child of this node.\nReturns the first child of this node.\nReturns the first child of this node.\nReturns the next sibling of this node.\nReturns the next sibling of this node.\nReturns the next sibling of this node.\nReturns <code>Some</code> if <code>self</code> is an <code>Entry::Occupied</code>.\nReturns the parent of this node, or <code>None</code> if this is the …\nReturns the parent of this node, or <code>None</code> if this is the …\nReturns the parent of this node, or <code>None</code> if this is the …\nReturns <code>Some</code> if <code>self</code> is an <code>NodeAccess::Storage</code>.\nReturns the user data stored in the node.\nReturns the user data associated to this node.\nReturns the user data associated to this node.\nReturns <code>Some</code> if <code>self</code> is an <code>Entry::Vacant</code>.\nReturns <code>true</code> if the trie doesn’t contain any node.\nReturns true if this node is the root node of the trie.\nReturns true if this node is the root node of the trie.\nReturns true if this node is the root node of the trie.\nReturns <code>true</code> if the node with the given index is a storage …\nReturns a list of all nodes in the structure in …\nReturns a list of all nodes in the structure, without any …\nReturns the number of nodes, both branch and storage …\nBuilds a new empty trie.\nReturns an <code>Entry</code> corresponding to the node whose key is …\nReturns the <code>NodeIndex</code> of the node with the given full key, …\nReturns the <code>NodeAccess</code> of the node at the given index, or …\nReturns the key of the node at the given index, or <code>None</code> if …\nReturns an opaque <code>NodeIndex</code> representing the node in the …\nReturns an opaque <code>NodeIndex</code> representing the node in the …\nReturns an opaque <code>NodeIndex</code> representing the node in the …\nReturns the parent of this node, or <code>None</code> if this is the …\nReturns the parent of this node, or <code>None</code> if this is the …\nReturns the parent of this node, or <code>None</code> if this is the …\nReturns the partial key of the node.\nReturns the partial key of the node.\nReturns the partial key of the node.\nReturns all nodes whose full key is within the given …\nReturns all nodes whose full key is within the given …\nRemoves the storage value and returns what this changes in …\nRemoves all nodes whose key starts with the given prefix.\nReturns the root node of the trie, or <code>None</code> if the trie is …\nReturns the user data associated with the root node of the …\nReduces the capacity of the trie as much as possible.\nReturns true if the structure of this trie is the same as …\nReturns the user data stored in the node.\nReturns the user data associated to this node.\nReturns the user data associated to this node.\nBuilds a new empty trie with a capacity for the given …\nUser data that was in the removed branch node (former …\nUnique child that the removed node had. The parent and …\nParent that the removed node had.\nSibling of the removed node. The parent and partial key of …\nUser data that was in the removed storage node.\nUser data that was in the removed node.\nUser data that was in the removed node.\nUser data that was in the removed node.\nAURA consensus.\nBABE consensus.\nVerifying a block body. This operation is also called …\nInherents, together with transactions, form the body of a …\nFailed to parse Ed25519 public key.\nBlock header signature is invalid.\nList of authorities is empty.\nNo pre-runtime digest in the block header.\nThe seal (containing the signature of the authority) is …\nHeader contains more than one new list of authorities.\nParent block doesn’t contain any Aura information.\nSlot number must be strictly increasing between a parent …\nSlot number starts too far in the future.\nConfiguration for <code>verify_header</code>.\nFailure to verify a block.\nInformation yielded back after successfully verifying a …\n<code>Some</code> if the list of authorities is modified by this block. …\nNumber of bytes used to encode the block number in the …\nAura authorities that must validate the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeader of the block to verify.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime elapsed since the Unix Epoch (i.e. 00:00:00 UTC on 1 …\nHeader of the parent of the block to verify.\nDuration of a slot in milliseconds. Can be found by …\nVerifies whether a block header provides a correct proof …\nPublic key used to for the signature is invalid.\nBlock is a secondary slot claim and its author is not the …\nBlock header signature is invalid.\nVRF proof in the block header is invalid.\nOverflow when calculating the index of the next epoch.\nType of slot claim forbidden by current configuration.\nAuthority index stored within block is out of range.\nThe header contains an epoch change that would put the …\nSee <code>VerifyError::InvalidChainConfiguration</code>\nThe configuration of the chain is invalid. It can’t be …\nBlock is the first block after a new epoch, but it is …\nNo pre-runtime digest in the block header.\nThe seal (containing the signature of the authority) is …\nOverflow when calculating the starting slot of the next …\nNo current epoch was provided, but the next epoch has an …\nParent block doesn’t belong to any epoch but is not the …\nThe next epoch has a non-zero epoch index, but has a start …\nVRF output is over threshold required to claim the primary …\nThe start slot of the epoch the parent block belongs to is …\nParent block doesn’t contain any Babe information.\nSlot number must be strictly increasing between a parent …\nBlock contains an epoch change digest log, but no epoch …\nConfiguration for <code>verify_header</code>.\nFailure to verify a block.\nInformation yielded back after successfully verifying a …\nNumber of bytes used to encode the block number in the …\nIf <code>Some</code>, the verified block contains an epoch transition …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeader of the block to verify.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if the claimed slot is a primary slot. <code>false</code> if it is …\nTime elapsed since the Unix Epoch (i.e. 00:00:00 UTC on 1 …\nEpoch the parent block belongs to. Must be <code>None</code> if and …\nHeader of the parent of the block to verify.\nEpoch that follows the epoch the parent block belongs to.\nSlot number the block belongs to.\nNumber of slots per epoch in the Babe configuration.\nVerifies whether a block header provides a correct proof …\nRuntime has returned some errors.\nError potentially returned by <code>check_execute_block_output</code>.\nError potentially returned by <code>execute_block_parameter</code>.\nError potentially returned by <code>check_check_inherents_output</code>.\nHeader provided as parameter is invalid.\nThe output is not empty.\nFailed to parse the output.\nChecks the output of the <code>BlockBuilder_check_inherents</code> …\nChecks the output of the <code>Core_execute_block</code> runtime call.\nReturns a list of buffers that, when concatenated …\nReturns a list of buffers that, when concatenated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of errors produced by the runtime.\nChain is using the Aura consensus engine.\nChain is using the Aura consensus engine.\nFailed to verify the authenticity of the block with the …\nChain is using the Babe consensus engine.\nChain is using the Babe consensus engine.\nFailed to verify the authenticity of the block with the …\nHash of the parent block doesn’t match the hash in the …\nConfiguration for a block verification.\nExtra items of <code>Config</code> that are dependant on the consensus …\nExtra items of <code>Config</code> that are dependant on the finality …\nError that can happen during the verification.\nBlock header contains items that don’t match the …\nChain uses the Grandpa finality algorithm.\nBlock schedules a Grandpa authorities change while another …\nBlock header contains items relevant to multiple consensus …\nNumber of the block to verify isn’t equal to the parent …\nBlocks themselves don’t contain any information …\nBlock successfully verified.\nBlock header contains an unrecognized consensus engine.\nIf <code>false</code>, digest items with an unknown consensus engine …\nHeader of the block to verify.\nNumber of bytes used to encode the block number in the …\nConfiguration items related to the consensus engine.\nConfiguration items related to the finality engine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the error isn’t actually about the block …\nHeader of the parent of the block to verify.\nVerifies whether a block is valid.\nAura authorities that must validate the block.\nTime elapsed since the Unix Epoch (i.e. 00:00:00 UTC on 1 …\nTime elapsed since the Unix Epoch (i.e. 00:00:00 UTC on 1 …\nEpoch the parent block belongs to. Must be <code>None</code> if and …\nEpoch that follows the epoch the parent block belongs to.\nDuration of a slot in milliseconds. Can be found by …\nNumber of slots per epoch in the Babe configuration.\n<code>Some</code> if the list of authorities is modified by this block. …\nIf <code>Some</code>, the verified block contains an epoch transition …\n<code>true</code> if the claimed slot is a primary slot. <code>false</code> if it is …\nSlot number the block belongs to.\nValues of the inherents to pass to the runtime.\nTurns this list of inherents into a list that can be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTurns this list of inherents into a list that can be …\nNumber of milliseconds since the UNIX epoch when the block …")