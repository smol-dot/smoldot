searchState.loadedDescShard("smoldot", 0, "Client for Polkadot and Substrate-compatible chains.\nData structures describing a chain of blocks.\nSubstrate chain configuration.\nPersistent data storage.\nWebAssembly runtime code execution.\nFinality consists is declaring a block as irreversible. It …\nParsing SCALE-encoded header.\nSubstrate-based chains make frequent use of asymmetric …\nInformation string printed out.\nJSON-RPC servers. Trusted access to the blockchain.\nLow-level peer-to-peer networking.\nHigh-level Polkadot/Substrate-specific networking.\nSyncing, short for synchronizing, consists in …\nTransactions handling.\nRadix-16 Merkle-Patricia trie.\nMethods that verify whether a block is correct.\nBlock generation system.\nConfiguration for <code>next_slot_claim</code>.\nSlot happening now or in the future and that can be …\nList of the Aura authorities allowed to produce a block. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterator to the list of Sr25519 public keys available …\nIndex within <code>Config::local_authorities</code> of the authority …\nCalculates the earliest one of the authorities in …\nTime elapsed since the Unix Epoch (i.e. 00:00:00 UTC on 1 …\nDuration, in milliseconds, of an Aura slot.\nUNIX time when the slot ends. Always superior to the value …\nSlot number of the claim. Used when building the block.\nUNIX time when the slot starts. Can be inferior to the …\nMore transactions can be added.\nBlock building is ready to accept extrinsics.\nResult of the previous call to …\nChain is using the Aura consensus algorithm.\nReady to start producing blocks.\nConfiguration to pass when the actual block authoring is …\nCurrent state of the block building process.\nCurrent state of the block building process.\nObtaining the Merkle value of the closest descendant of a …\nObtaining the Merkle value of the closest descendant of a …\nConfiguration for a block generation.\nExtension to <code>Config</code>.\nError that can happen during the block production.\nError happened during the generation.\nNone of the authorities available locally are allowed to …\nRuntime has generated an invalid block header.\nFetching the key that follows a given one in the parent …\nFetching the key that follows a given one in the parent …\nSetting the value of an offchain storage value is required.\nSetting the value of an offchain storage value is required.\nBlock production is ready to start.\nError while producing the block in the runtime.\nBlock has been produced and must now be sealed.\nBlock has been produced by the runtime and must now be …\nLoading a storage value from the parent storage is …\nLoading a storage value from the parent storage is …\nBlock production is idle, waiting for a slot.\nBlock production is idle, waiting for a slot.\nAdds a SCALE-encoded extrinsic and resumes execution.\nReturns the index within the list of authorities of the …\nCapacity to reserve for the number of extrinsics. Should …\nNumber of bytes used to encode block numbers in the header.\nIf <code>true</code>, then the search must include both branch nodes …\nIf <code>true</code>, then <code>StorageChanges::trie_changes_iter_ordered</code> …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nConsensus-specific configuration.\nIndicate that no more extrinsics will be added, and resume …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInjects the key.\nInjects the corresponding Merkle value.\nInjects the Sr25519 signature of the hash of the …\nInjects the corresponding storage value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the key whose value must be passed to …\nReturns the key whose closest descendant Merkle value must …\nReturns the key whose next key must be passed back.\nReturns the key whose value must be set.\nMaximum log level of the runtime.\nInitializes a new builder.\nTime elapsed since the Unix Epoch (i.e. 00:00:00 UTC on 1 …\nIf <code>true</code>, then the provided value must the one superior or …\nHash of the parent of the block to generate.\nHeight of the parent of the block to generate.\nRuntime used to check the new block. Must be built using …\nReturns the prefix the next key must start with. If the …\nResumes execution after having set the value.\nIndicate that the value is unknown and resume the …\nReturns the SCALE-encoded header whose hash must be signed.\nReturns when the authoring slot ends, as a UNIX timestamp …\nReturns when the authoring slot start, as a UNIX timestamp …\nStart producing the block.\nStart the block production.\nReturns the data to sign. This is the hash of the …\nReturns the value to set.\nReturns when block production can begin, as a UNIX …\nThe error in question.\nRuntime of the parent block, as provided at initialization.\nResult of the previous call to …\nObject to use to continue trying to push other …\nList of the Aura authorities allowed to produce a block. …\nIterator to the list of Sr25519 public keys available …\nTime elapsed since the Unix Epoch (i.e. 00:00:00 UTC on 1 …\nDuration, in milliseconds, of an Aura slot.\nThe transaction birth block is ancient.\nMore transactions can be added.\nBlock building is ready to accept extrinsics.\nResult of the previous call to …\nChain uses the Aura consensus algorithm.\nChain uses the Babe consensus algorithm.\nError while parsing output of <code>BlockBuilder_apply_extrinsic</code>.\nError while parsing output of …\nAn extrinsic with a Mandatory dispatch resulted in Error. …\nA bad origin.\nGeneral error to do with the transaction’s proofs (e.g. …\nCurrent state of the block building process.\nOverflow when incrementing block height.\nThe call of the transaction is not expected.\nCould not lookup some information that is required to …\nFailed to lookup some data.\nObtaining the Merkle value of the closest descendant of a …\nObtaining the Merkle value of the closest descendant of a …\nConfiguration for a block generation.\nExtra configuration depending on the consensus algorithm.\nAny other custom invalid validity that is not covered by …\nAny other custom unknown validity that is not covered by …\nReason why a dispatch call failed.\nError that can happen during the block production.\nThe transaction would exhaust the resources of current …\nBlock generation is over.\nGeneral error to do with the transaction not yet being …\nApplying an inherent extrinsic has returned a <code>DispatchError</code>…\nApplying an inherent extrinsic has returned a …\nThe list of inherent extrinsics are needed in order to …\nThe inherent extrinsics are required in order to continue.\n<code>Core_initialize_block</code> has returned a non-empty output.\nThe transaction is invalid.\nAn invalid transaction validity.\nA transaction with a mandatory dispatch. This is invalid; …\nA custom error in a module.\nFetching the key that follows a given one in the parent …\nFetching the key that follows a given one in the parent …\nNo validator found for the given unsigned transaction.\nSetting the value of an offchain storage value is required.\nSetting an offchain storage value is required in order to …\nGeneral error to do with the inability to pay some fees …\nGeneral error to do with the transaction being outdated …\nLoading a storage value from the parent storage is …\nLoading a storage value from the parent storage is …\nBlock successfully verified.\nErrors that can occur while checking the validity of a …\nTransaction validity can’t be determined.\nAn unknown transaction validity.\nError while initializing the Wasm virtual machine.\nError while executing the Wasm virtual machine.\nAdds a SCALE-encoded extrinsic and resumes execution.\nCapacity to reserve for the number of extrinsics. Should …\nNumber of bytes used to encode block numbers in the header.\nBody of the produced block.\nIf <code>true</code>, then the search must include both branch nodes …\nStart a block building process.\nIf <code>true</code>, then <code>StorageChanges::trie_changes_iter_ordered</code> …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nConsensus-specific item to put in the digest of the header …\nIndicate that no more extrinsics will be added, and resume …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInjects the inherents extrinsics and resumes execution.\nInjects the key.\nInjects the corresponding Merkle value.\nInjects a raw list of inherents and resumes execution.\nInjects the corresponding storage value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the key whose value must be passed to …\nReturns the key whose closest descendant Merkle value must …\nReturns the key whose next key must be passed back.\nReturns the key whose value must be set.\nMaximum log level of the runtime.\nIf <code>true</code>, then the provided value must the one superior or …\nHash of the parent of the block to generate.\nHeight of the parent of the block to generate.\nRuntime used to check the new block. Must be built using …\nRuntime that was passed by <code>Config</code>.\nReturns the prefix the next key must start with. If the …\nResumes execution after having set the value.\nIndicate that the value is unknown and resume the …\nSCALE-encoded header of the produced block.\nState trie version indicated by the runtime. All the …\nList of changes to the storage main trie that the block …\nReturns the value to set.\nResult of the previous call to …\nObject to use to continue trying to push other …\nModule specific error value.\nModule index, matching the metadata module index.\nError returned by the runtime.\nError returned by the runtime.\nExtrinsic that triggered the problem.\nExtrinsic that triggered the problem.\nPerforming asynchronous operations on blocks.\nFinalized block header, plus tree of authenticated …\nData structures containing the finalized state of the …\nData structure containing trees of nodes.\nIdentifier for an asynchronous operation in the <code>AsyncTree</code>.\nInformation about an operation that must be started.\nSee the module-level documentation.\nThe output best block has been modified.\nA new block has been added to the list of output …\nConfiguration for <code>AsyncTree::new</code>.\nA non-finalized block has been finalized in the output.\nSee <code>AsyncTree::input_output_iter_unordered</code> and …\nSee <code>AsyncTree::try_advance_output</code>.\nSee <code>OutputUpdate</code>.\nReturns the ancestors of the given node. The iterator …\nReturns the blocks targeted by this asynchronous operation.\nInjects into the state of the state machine a failed …\nInjects into the state of the data structure a completed …\nUser data of the asynchronous operation of this block.\nReturns the asynchronous operation user data associated to …\nReturns the asynchronous operation user data associated to …\nIndex of the block to perform the operation against.\nNumber of elements to initially allocate to store blocks.\nReturns the list of children that have the given node as …\nOutcome of the asynchronous operation of the finalized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifier to later provide when calling …\nIndex of the block.\nIndex of the node within the data structure.\nReturns the <code>NodeIndex</code> of the current “input” best …\nUpdates the state machine to take into account that the …\nInserts a new block in the state machine.\nReturns the list of all non-finalized blocks that have …\nReturns the list of all non-finalized blocks that have …\nUpdates the state machine to take into account that the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if this block is considered as the best block of the …\nWhether this block is considered as the best block of the …\nReplaces all asynchronous operation user data with new …\nReturns a new empty <code>AsyncTree</code>.\nExamines the state of <code>self</code> and, if a block’s …\nReturns the number of non-finalized blocks.\nReturns the <code>NodeIndex</code> of the current “output” best …\nReturns the outcome of the asynchronous operation for the …\nReturns the parent of the given node. Returns <code>None</code> if the …\nAfter an asynchronous operation fails, retry after this …\nTries to update the output blocks to follow the input.\nUser data associated to this block that was passed to …\nIndex of the best block after the finalization. <code>None</code> if …\n<code>true</code> if the finalization has updated the best output block.\nUser data associated to the <code>async</code> operation of the …\nIndex of the node within the data structure. This index is …\nBlocks that were a descendant of the former finalized …\nUser data associated to this block.\nThe parent of the block isn’t known.\nThe target block height is strictly inferior to the …\nError that can happen when verifying a Grandpa commit.\nConfiguration for the <code>NonFinalizedTree</code>.\nBlock uses a different consensus than the rest of the …\nBlock is already known.\nThe target block height is the same as the finalized …\nThe target block height and hash are the same as the block …\nReturned by <code>NonFinalizedTree::verify_justification</code> and …\nError while verifying the finality in the context of the …\nError while verifying the finality in the context of the …\nError that can happen when verifying a proof of finality.\nBlock is now part of the finalized chain.\nError that can happen when verifying a block header.\nSee <code>NonFinalizedTree::verify_header</code>.\nError while decoding the commit.\nError while decoding the header.\nError while decoding the justification.\nType of the justification doesn’t match the finality …\nError that can happen when verifying a justification.\nHolds state about the current state of the chain for the …\nNot enough blocks are known by the tree to verify this …\nChain doesn’t use the GrandPa algorithm.\nBlock is not a descendant of the new finalized block.\nBlock removed from the <code>NonFinalizedTree</code> by a …\nReason why a block was removed from the <code>NonFinalizedTree</code> …\nIterator producing the newly-finalized blocks removed from …\nError that can happen when setting the finalized block.\nThere exists a block in-between the latest finalized block …\nBlock must have been passed to …\nBlock can’t be verified as it uses an unknown consensus …\nFinality proof targets a block that isn’t in the chain.\nThe justification verification has failed. The …\nThe commit verification has failed. The commit is invalid …\nThe block verification has failed. The block is invalid …\nBlock wasn’t known and has been successfully verified.\nSuccessfully-verified block header that can be inserted …\nIf <code>false</code>, blocks containing digest items with an unknown …\nApplies the justification, finalizing the given block.\nBuilds a <code>chain_information::ChainInformationRef</code> struct …\nReturns consensus information about the current best block …\nReturns the hash of the best block.\nReturns the header of the best block.\nReturns the height of the best block.\nHash of the block.\nHeight of the block.\nReturns the value that was initially passed in …\nNumber of bytes used when encoding/decoding the block …\nReturns the user data of the block about to be justified.\nPre-allocated size of the chain, in number of …\nInformation about the latest finalized block and its …\nRemoves all non-finalized blocks from the tree.\nReturns true if the block with the given hash is in the …\nReturns a list of blocks (by their height and hash) that …\nReturns the hash of the latest finalized block.\nReturns the header of the latest finalized block.\nReturns the height of the latest finalized block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a header that has already been verified to be valid.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns the block header.\nReturns true if the block to be finalized is the current …\nReturns true if there isn’t any non-finalized block in …\nReturns the header of all known non-finalized blocks in …\nReturns the header of all known non-finalized blocks in …\nReturns the number of non-finalized blocks in the chain.\nInitializes a new queue.\nReturns the SCALE-encoded header of a block stored by the …\nGives access to the user data of a block stored by the …\nGives access to the user data of a block stored by the …\nReserves additional capacity for at least <code>additional</code> new …\nReturns the block header.\nSCALE-encoded header of the block.\nSets the latest known finalized block. Trying to verify a …\nShrink the capacity of the chain as much as possible.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReason why the block was removed.\nReturns true if the finalization process modifies the best …\nUser data that was associated with that block in the …\nVerifies the given Grandpa commit message.\nVerifies the given block header.\nVerifies the given justification.\nBlock number that the commit targets.\nHash of the block that isn’t in the chain.\nNumber of the block that isn’t in the chain.\nNumber of the block to finalize first.\nHash of the block contained in the justification.\nNumber of the block contained in the justification.\nHash of the parent block in question.\nTrue if the verified block will become the new “best” …\nHeader that has been verified. Can be passed to …\nChain is using the Aura consensus engine.\nChain is using the Aura consensus engine.\nChain is using the Babe consensus engine.\nChain is using the Babe consensus engine.\nMismatch between the finalized block header digest and the …\nInformation about a Babe epoch.\nInformation about a Babe epoch.\nError when checking the validity of a Babe epoch.\nInformation about the latest finalized block and state …\nExtra items that depend on the consensus engine.\nExtra items that depend on the consensus engine.\nExtra items that depend on the finality engine.\nExtra items that depend on the finality engine.\nEquivalent to a <code>ChainInformation</code> but referencing an …\nThe finalized block doesn’t use the same consensus …\nThe finalized block is block number 0, but the GrandPa …\nChain uses the Grandpa finality algorithm.\nSee equivalent variant in <code>ChainInformationFinality</code>.\nThe slot of the finalized block is inferior to the start …\nError in a Babe epoch information.\nBabe constant should be a fraction where the numerator is …\nMissing Babe slot start number for Babe epoch number other …\nFinalized block is not number 0, but no Babe epoch …\nBlocks themselves don’t contain any information …\nSee equivalent variant in <code>ChainInformationFinality</code>.\nScheduled GrandPa authorities change is before finalized …\nFinalized block is block number 0, and a Babe epoch …\nFound a Babe slot start number for future Babe epoch …\nAny node on the chain is allowed to produce blocks.\nSee <code>ChainInformationConsensus::Unknown</code>.\nInformation about the latest finalized block and state …\nInformation about the latest finalized block and state …\nError when turning a <code>ChainInformation</code> into a …\nTypes of blocks allowed for this epoch.\nSee equivalent field in <code>BabeEpochInformation</code>.\nGives access to the information.\nGives access to the information.\nList of authorities allowed to author blocks during this …\nSee equivalent field in <code>BabeEpochInformation</code>.\nBuild the chain information of a chain given its runtime.\nValue of the constant that allows determining the chances …\nSee equivalent field in <code>BabeEpochInformation</code>.\nExtra items that depend on the consensus engine.\nExtra items that depend on the consensus engine.\nIndex of the epoch.\nSee equivalent field in <code>BabeEpochInformation</code>.\nExtra items that depend on the finality engine.\nExtra items that depend on the finality engine.\nHeader of the highest known finalized block.\nSee equivalent field in <code>ChainInformation</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRandomness value for this epoch.\nSee equivalent field in <code>BabeEpochInformation</code>.\nSlot at which the epoch starts.\nSee equivalent field in <code>BabeEpochInformation</code>.\nChecks whether the fields in this struct make sense.\nChecks whether the information is coherent.\nChecks whether the fields in this struct make sense.\nList of authorities that must validate children of the …\nBabe epoch information about the epoch the finalized block …\nBabe epoch information about the epoch right after the one …\nDuration, in milliseconds, of an Aura slot.\nNumber of slots per epoch. Configured at the genesis block …\nSee equivalent field in <code>ChainInformationConsensus</code>.\nSee equivalent field in <code>ChainInformationConsensus</code>.\nSee equivalent field in <code>ChainInformationConsensus</code>.\nSee equivalent field in <code>ChainInformationConsensus</code>.\nSee equivalent field in <code>ChainInformationConsensus</code>.\nGrandpa authorities set ID of the block right after …\nChange in the GrandPa authorities list that has been …\nList of GrandPa authorities that need to finalize the …\nSee equivalent field in <code>ChainInformationFinality</code>.\nSee equivalent field in <code>ChainInformationFinality</code>.\nSee equivalent field in <code>ChainInformationFinality</code>.\nThe block can any block, genesis block of the chain or not.\nFailed to decode the output of the <code>AuraApi_authorities</code> …\nFailed to decode the output of the <code>AuraApi_slot_duration</code> …\nFailed to decode the output of the <code>BabeApi_configuration</code> …\nFailed to decode the output of the <code>BabeApi_current_epoch</code> …\nFailed to decode the output of the <code>BabeApi_next_epoch</code> …\nCurrent state of the operation.\nObtaining the Merkle value of the closest descendant of a …\nObtaining the Merkle value of the closest descendant of a …\nConfiguration to provide to <code>ChainInformationBuild::new</code>.\nSee <code>Config::finalized_block_header</code>.\nProblem encountered during the chain building process.\nFetching the chain information is over.\nThe block is the genesis block of the chain.\nThe version of <code>GrandaApi</code> is too old to be able to build …\nFailed to decode the output of the <code>GrandpaApi_authorities</code> …\nFailed to decode the output of the …\nChain information building is still in progress.\nStill in progress.\nThe combination of the information retrieved from the …\nMultiple consensus algorithms have been detected.\nFetching the key that follows a given one is required in …\nFetching the key that follows a given one is required in …\nRuntime has called an offchain worker host function.\nFunction call to perform or being performed.\nLoading a storage value is required in order to continue.\nLoading a storage value is required in order to continue.\nError while starting the Wasm virtual machine.\nError while running the Wasm virtual machine.\nNumber of bytes of the block number encoded in the block …\nIf <code>true</code>, then the search must include both branch nodes …\nReturns the runtime call currently being made.\nReturns the runtime call currently being made.\nReturns the runtime call currently being made.\nReturns the runtime call currently being made.\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nHeader of the finalized block, whose chain information is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nName of the runtime function corresponding to this call.\nInjects the key.\nInjects the corresponding Merkle value.\nInjects the corresponding storage value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the key whose value must be passed to …\nReturns the key whose closest descendant Merkle value must …\nReturns the key whose next key must be passed back.\nStarts a new chain information build process.\nIf <code>true</code>, then the provided value must the one superior or …\nReturns the list of parameters to pass when making the …\nReturns the list of parameters to pass when making the …\nReturns the prefix the next key must start with. If the …\nReturns the list of runtime calls that will be performed. …\nIndicate that the value is unknown and resume the …\nRuntime of the finalized block. Must be built using the …\nThe result of the computation.\nValue of <code>Config::runtime</code> passed back.\nCan be used to pass information about the finality of the …\nHeader of the block.\nHash of the root of the state trie of the genesis.\nTree of nodes. Each node contains a value of type <code>T</code>.\nReturns the value that compares superior or equal to any …\nValue that compares inferior or equal to any possible […\nIndex of a node within a <code>ForkTree</code>. Never invalidated …\nIterator of elements removed when pruning ancestors.\nNode removed by <code>ForkTree::prune_ancestors</code>.\nReturns the ancestors of the given node. The iterator is …\nReturns two iterators: the first iterator enumerates the …\nReturns the list of children that have the given node as …\nRemoves all elements in the tree, leaving it empty.\nReturns the common ancestor between <code>node1</code> and <code>node2</code>, if …\nReturns <code>true</code> if the given <code>NodeIndex</code> is valid.\nFinds the first node in the tree that matches the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of the node with the given index.\nReturns the value of the node with the given index.\nAdds <code>1</code> to <code>self</code>. Returns <code>None</code> if this causes an overflow.\nFormer index of the node. This index is no longer valid.\nInserts a new node in the tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns true if <code>maybe_ancestor</code> is an ancestor of …\nReturns true if there isn’t any element in the tree.\nTrue if this node is an ancestor of the target of the …\nReturns an iterator to all the node values. The returned …\nReturns an iterator to all the node values without any …\nReturns the number of elements in the tree.\nModifies all the block user datas and returns a new map.\nInitializes a new <code>ForkTree</code>.\nEnumerates all the nodes, starting from the given node, to …\nReturns the parent of the given node. Returns <code>None</code> if the …\nRemoves from the tree:\nRemoves from the tree any node that isn’t either an …\nReserves additional capacity for at least <code>additional</code> new …\nSame as <code>ForkTree::node_to_root_path</code>, but gives the path in …\nShrink the capacity of the tree as much as possible.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nValue that was passed to <code>ForkTree::insert</code>.\nInitializes a new <code>ForkTree</code> with a certain pre-allocated …\nSee <code>ChainSpec::boot_nodes</code>.\nError while building the chain information.\nA configuration of a chain. Can be used to build a genesis …\nError when building the chain information corresponding to …\nError when building the chain information from the genesis …\nThe checkpoint corresponds to the genesis block.\nSee <code>ChainSpec::genesis_storage</code>.\nSee <code>GenesisStorage</code>.\nFailed to decode heap pages from the storage.\nFound a value of 0 for the number of Babe slots per epoch.\nInformation found in the checkpoint is invalid.\nFound a Grandpa authority with a weight of 0.\nThe items of the genesis storage are known.\nError that can happen when parsing a chain spec JSON.\nThe address of the bootnode is valid.\nRuntime couldn’t be found in the storage.\nThe items of the genesis storage are unknown, but we know …\nChain specification doesn’t contain the list of storage …\nThe address of the bootnode couldn’t be parsed.\nError when initializing the virtual machine.\nReturns a list of hashes of block headers that should …\nReturns the number of bytes that the “block number” …\nReturns the list of bootnode addresses found in the chain …\nReturns a string indicating the type of chain.\nReturns the “fork id” of the chain. This is arbitrary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse JSON content into a <code>ChainSpec</code>.\nGives access to what is known about the storage of the …\nReturns true if the chain is of a type for which a live …\nReturns the identifier of the chain. Similar to the name, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Some</code> for <code>GenesisStorage::Items</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> for <code>GenesisStorage::TrieRootHash</code>, and <code>None</code> …\nReturns the list of storage keys and values of the genesis …\nReturns the name of the chain. Meant to be displayed to …\nFind the storage key that immediately follows <code>key_before</code> …\nReturns a list of arbitrary properties contained in the …\nReturns the network protocol id that uniquely identifies a …\nTurns this chain specification into a JSON document …\nReturns the list of libp2p multiaddresses of the default …\nBuilds the <code>ChainInformation</code> corresponding to the genesis …\nReturns the genesis storage value for a specific key.\nString representation of the multiaddress that can be used …\nBytes representation of the libp2p peer id of the bootnode.\nSerializing/deserializing a …\nFilesystem-backed database containing all the information …\nOpaque error indicating a corruption in the data stored in …\nOutcome of <code>decode_chain</code>.\nDecoded chain information.\nDeserializes the information about the chain.\nSerializes the given chain information as a JSON string.\nSerializes the given chain information and finalized block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll the keys and values found in the database. <code>None</code> if no …\nError when decoding the header to import.\nThe new best block would be outside of the finalized chain.\nThe header of a block in the database has failed to decode.\nThe parent of a block in the database couldn’t be found …\nConfiguration for the database.\nType of database.\nError accessing the database.\nError accessing the database.\nError accessing the database.\nError in the content of the database.\nAn open database. Holds file descriptors.\nEither existing database or database prototype.\nStore the database on disk.\nBlock was already in the database.\nEither a database has just been created, or there existed …\nSome trie nodes of the storage of the requested block hash …\nError while calling <code>SqliteFullDatabase::insert</code>.\nLow-level database error, such as an error while accessing …\nA block hash is expected to be 32 bytes. This isn’t the …\nFinalized block number stored in the database doesn’t …\nBlock numbers are expected to be 64 bits.\nThe version information about a storage entry has failed …\nA trie hash is expected to be 32 bytes. This isn’t the …\nStore the database in memory. The database is discarded on …\nSome parts of the database refer to a block by its hash, …\nMissing a key in the <code>meta</code> table.\nParent of the block to insert isn’t in the database.\nSee …\nSee <code>MissingTrieNode::blocks</code>.\nA database already existed and has now been opened.\nNew finalized block must be a child of the previous …\nError while calling <code>SqliteFullDatabase::set_finalized</code>.\nAn open database. Holds file descriptors.\nError while accessing the storage of the finalized block.\nNew finalized block isn’t in the database.\nRequested block couldn’t be found in the database.\nReturns the hash of the block in the database whose …\nReturns the hash of the block of the best chain given a …\nReturns the list of extrinsics of the given block, or <code>None</code> …\nReturns the hashes of the blocks given a block number.\nNumber of bytes used to encode the block number.\nReturns the hash of the parent of the given block, or <code>None</code> …\nReturns the SCALE-encoded header of the given block, or …\nReturns the Merkle value of the trie node in the storage …\nReturns the value associated with a node of the trie of …\nReturns the key in the storage that immediately follows or …\nBlocks the trie node is known to belong to.\nMaximum allowed size, in bytes, of the SQLite cache.\nReturns a list of trie nodes that are missing from the …\nReturns the hash of the finalized block in the database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash of the block.\nInserts the given finalized block in the database …\nInsert a new block in the database.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHeight of the block.\nOpens the database using the given <code>Config</code>.\nPath of the parent tries leading to the trie node.\nRemoves from the database all blocks that aren’t a …\nInserts a block in the database and sets it as the …\nChanges the finalized block to the given one.\nReturns an opaque string representing the version number …\nReturns a <code>chain_information::ChainInformation</code> struct …\nHash of the missing trie node.\nNibbles that compose the key of the trie node.\nType of database.\nMaximum allowed amount of memory, in bytes, that SQLite …\nPath to the directory containing the database.\nIf <code>true</code>, the value is equal to the Merkle value of the …\nDefault number of heap pages if the storage doesn’t …\nError potentially returned by <code>storage_heap_pages_to_value</code>.\nNumber of heap pages is too large.\nStorage value has the wrong length.\nReturns the argument unchanged.\nWasm virtual machine specific to the Substrate/Polkadot …\nCalls <code>U::from(self)</code>.\nWasm virtual machine, with automatic storage overlay.\n“Diff” between a trie and the next.\nConverts a value of the key <code>:heappages</code> found in the …\nGiven as input a partial base trie and a diff, calculates …\nGeneral-purpose WebAssembly virtual machine.\nRuntime has called the …\nRuntime has tried to initiate a batch signatures …\nError in the format of the runtime code.\nA non-<code>i64</code> value has been returned by the Wasm entry point.\nRuntime has tried to perform a signature batch …\nMust provide the runtime version obtained by calling the …\nNeed to call <code>Core_version</code> on the given Wasm code and …\nCalled <code>ext_default_child_storage_root_version_1</code> or …\nConfiguration for <code>HostVmPrototype::new</code>.\nThe host function returns the given value.\nError while calling <code>Core_version</code> to determine the runtime …\nThe size of the input data is too large.\nDeclares the end of a transaction.\nEnds a storage transaction. All changes made to the …\nReason why the Wasm blob isn’t conforming to the runtime …\nThe Wasm blob did something that doesn’t conform to the …\nMust set off-chain index value.\nMust set off-chain index value.\nMust get the value of the off-chain storage.\nMust load an offchain storage value.\nMust set the value of the off-chain storage.\nMust set value of an off-chain storage entry.\nMust load a storage value, treat it as if it was a …\nSee documentation of <code>ExternalStorageAppend</code>.\nMust remove from the storage keys which start with a …\nMust remove all the storage values starting with a certain …\nMust provide the value of a storage entry.\nMust load an storage value.\nMust provide the storage key that follows, in …\nNeed to provide the storage key that follows a specific …\nMust provide the trie root hash of the storage and write …\nMust provide the trie root hash of the storage and write …\nMust set the value of a storage entry.\nMust set an storage value.\nError while determining .\nError while finding the custom section.\nFunction execution has succeeded. Contains the return …\nFunction execution has succeeded. Contains the return …\nExecution has finished while a transaction started with …\nCalled <code>ext_allocator_free_version_1</code> with an invalid …\nQueries the maximum log level.\nNeed to provide the maximum log level.\nCouldn’t find the <code>__heap_base</code> symbol in the Wasm code.\nMust output the hexadecimal encoding of the given buffer.\nThe host function isn’t implemented.\nRunning virtual machine.\nPrototype for an <code>HostVm</code>.\nThe data is zstandard-compressed, but the data is in an …\nMust output a log line.\nReport about a log entry being emitted.\nRuntime has emitted a log entry.\nDetail about what a <code>LogEmit</code> should output. See …\nSee <code>LogEmitInfo</code>. Use the <code>AsRef</code> trait implementation to …\nSee <code>LogEmitInfo</code>. Use the <code>AsRef</code> trait implementation to …\nMaximum size of the Wasm memory found in the module is too …\nError possibly returned when decoding a zstd-compressed …\nError that can happen when initializing a VM.\nCalled <code>ext_storage_rollback_transaction_version_1</code> or …\nRuntime has tried to finish a batch signatures …\nMust output a single number.\nMust provide a randomly-generate number.\nMust return random seed.\nMust submit an off-chain transaction.\nSubmit a transaction from offchain worker.\nMust return the current UNIX timestamp.\nNeed to provide the current timestamp.\nError when allocating memory for a return type.\nFailed to decode a SCALE-encoded parameter.\nOne parameter is expected to point to a buffer, but the …\nVirtual machine is ready to run.\nWasm virtual machine is ready to be run. Call …\nThe pointer and size returned by the Wasm entry point …\nError while decoding the runtime APIs.\nError while finding the runtime-version-related sections …\nError while decoding the runtime version.\nMust verify whether a signature is correct.\nNeed to verify whether a signature is valid.\nError that can happen when starting a VM.\nDeclares the start of a transaction.\nDeclares the start of a storage transaction. See …\nMismatch between the state trie version provided as …\nBehavior if the …\nThe size of the code exceeds the maximum allowed length.\nError in the Wasm code execution.\nThe host function is unimplemented. An error is returned …\nCalled a function that is unknown to the host.\nMust output a UTF-8 string.\nOne parameter is expected to point to a UTF-8 string, but …\nError while initializing the virtual machine.\nError while starting the virtual machine.\nIf <code>true</code>, no <code>vm::NewErr::UnresolvedFunctionImport</code> error …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, write to the given child trie. If <code>None</code>, write to …\nIf <code>Some</code>, write to the given child trie. If <code>None</code>, write to …\nIf <code>Some</code>, write to the given child trie. If <code>None</code>, write to …\nReturns the child trie whose root hash must be provided. …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nHint used by the implementation to decide which kind of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the number of heap pages that were passed to …\nNumber of pages of heap available to the virtual machine.\nReturns the data that the runtime would like to print.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns the virtual machine back into a prototype.\nCancels execution of the virtual machine and returns back …\nVerify the signature. Returns <code>true</code> if it is valid.\nReturns the key whose value must be provided back with …\nReturns the key whose value must be set.\nReturns the key whose value must be set.\nReturns the key whose following key must be returned.\nReturns the key whose value must be set.\nReturns the key whose value must be set.\nReturns the key whose value must be loaded.\nReturns the maximum number of keys to remove. <code>None</code> means …\nMaximum size of the value to pass back.\nReturns the message that the signature is expected to sign.\nBytes of the WebAssembly module.\nCreates a new <code>HostVmPrototype</code>. Parses and potentially JITs …\nOffset within the value that is requested.\nReturns the value the current value should be compared …\nReturns the prefix whose keys must be removed.\nReturns the behavior to employ when proof recording is …\nReturns the public key the signature is against.\nWrites the storage value in the Wasm VM’s memory and …\nResumes execution after having set the value.\nResumes execution after having set the value.\nResumes execution after having cleared the values.\nWrites the trie root hash to the Wasm VM and prepares it …\nWrites the follow-up key in the Wasm VM memory and …\nWrites the SCALE-encoded runtime version to the memory and …\nResumes execution after having set the value.\nResumes execution after having set the value. Must …\nResumes execution after having set the value.\nResumes execution after having set the value.\nResumes execution after having set the value.\nResumes execution after having submitted the transaction.\nResumes execution.\nResumes execution after indicating the maximum log level.\nResumes execution after having acknowledged the event.\nResumes execution after having acknowledged the event.\nResume the execution assuming that the signature is …\nSame as <code>ExternalStorageGet::resume</code>, but passes the full …\nResume the execution assuming that the signature is valid.\nSimilar to <code>ExternalStorageGet::resume</code>, but allows passing …\nRuns the virtual machine until something important happens.\nStarts the VM, calling the function passed as parameter.\nSame as <code>HostVmPrototype::run</code>, except that the function …\nSame as <code>HostVmPrototype::run</code>, except that the function …\nWasm runtimes can optionally contain a custom section (as …\nReturns the runtime version found in the module.\nReturns the signature.\nReturns the state trie version indicated by the runtime.\nReturns the SCALE-encoded transaction to submit to the …\nReturns the value the called function has returned.\nReturns the value to set.\nReturns the value to append.\nReturns the value to set.\nReturns the value to set.\nVerify the signature and resume execution.\nReturns the Wasm code whose runtime version must be …\nType that has actually gotten returned. <code>None</code> for “void”…\nDecoding error that happened.\nName of the function that was unresolved.\nName of the function being called where a type mismatch …\nName of the function being called where a type mismatch …\nName of the function being called.\nName of the function being called.\nExpected length of the buffer.\nSize of the virtual memory.\nMessage generated by the runtime.\nName of module associated with the unresolved function.\nIndex of the invalid parameter. The first parameter has …\nIndex of the invalid parameter. The first parameter has …\nThe version passed as parameter.\nPointer that got returned.\nPointer passed as parameter.\nPointer that was expected to be freed.\nSize of the requested allocation.\nSize that got returned.\nThe version in the specification.\nError that happened.\nVirtual machine ready to be used again.\nObject used to resume execution.\nIf true, changes must be rolled back.\nLog level. Arbitrary number indicated by runtime, but …\nActual log message being emitted.\n“Target” of the log. Arbitrary string indicated by the …\nBuffer storing the SCALE-encoded core version.\nOne API that the runtime supports.\nError potentially returned by …\nIterator to a list of APIs. See <code>CoreVersionRef::apis</code>.\nError while executing <code>Core_version</code>.\nRuntime specification, once decoded.\nOnly one of the two desired custom sections is present.\nError while decoding the output.\nReturns by <code>find_encoded_embedded_runtime_version_apis</code>.\nFailed to parse Wasm binary.\nError returned by <code>find_embedded_runtime_version</code>.\nError returned by …\nError while finding the custom section.\n<code>Core_version</code> used a host function that is forbidden in …\nError during the execution of the <code>Core_version</code> function.\nError while decoding the runtime APIs.\nError while decoding the runtime version.\nError while starting the execution of the <code>Core_version</code> …\nList of “API“s that the runtime supports.\nReturns <code>true</code> if this iterator contains the API with the …\nSimilar to <code>CoreVersionApisRefIter::contains</code>, but allows …\nTries to find the custom section containing the runtime …\nTries to find the custom sections containing the runtime …\nTries to find within this iterator the given API, and if …\nSimilar to <code>CoreVersionApisRefIter::find_version</code>, but …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a SCALE-encoded list of APIs.\nHashes the name of an API in order to be able to compare …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nBLAKE2 hash of length 8 of the name of the API.\nContent of the <code>runtime_apis</code> section, if any was found.\nContent of the <code>runtime_version</code> section, if any was found.\nReturns the SCALE encoding of this data structure.\nVersion number of the state trie encoding version.\nArbitrary version number corresponding to the transactions …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nVersion of the module. Typical values are <code>1</code>, <code>2</code>, <code>3</code>, …\nObtaining the Merkle value of the closest descendant of a …\nObtaining the Merkle value of the closest descendant of a …\nConfiguration for <code>run</code>.\nError that can happen during the execution.\nExecution is over.\nTrie node is either newly-created, or already existed and …\nReport about a log entry being emitted.\nRuntime would like to emit some log.\nFetching the key that follows a given one is required in …\nFetching the key that follows a given one is required in …\nFunctions that can only be called within the context of an …\nProviding a random number is required in order to continue.\nSetting the value of an offchain storage value is required.\nLoading an offchain storage value is required in order to …\nSetting the value of an offchain storage value is required.\nSetting an offchain storage value is required in order to …\nThe runtime requests submitting a transaction.\nProviding the current UNIX timestamp is required in order …\nRandom seed for offchain worker.\nTrie node is removed.\nCurrent state of the execution.\nVerifying whether a signature is correct is required in …\nVerifying whether a signature is correct is required in …\nSee <code>Success::storage_changes</code>.\nLoading a storage value is required in order to continue.\nLoading a storage value is required in order to continue.\nLoading an offchain storage value is required in order to …\nSetting an offchain storage value is required in order to …\nSubmit transaction from offchain worker.\nExecution is successful.\nFunction execution has succeeded. Contains the return …\nTimestamp for offchain worker.\nIf <code>true</code>, then the search must include both branch nodes …\nIf <code>true</code>, then <code>StorageChanges::trie_changes_iter_ordered</code> …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nIf <code>Some</code>, read from the given child trie. If <code>None</code>, read …\nReturns an iterator to all the entries of the given child …\nExact error that happened.\nReturns an empty <code>StorageChanges</code>, as if the execution didn…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nName of the function to be called.\nReturns the data that the runtime would like to print.\nInjects the key.\nInjects the corresponding Merkle value.\nResume execution by providing a random number.\nResume execution by providing the current UNIX timestamp.\nInjects the corresponding storage value.\nInjects the corresponding storage value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a diff of the main trie.\nTurns the virtual machine back into a prototype.\nCancels execution of the virtual machine and returns back …\nVerify the signature. Returns <code>true</code> if it is valid.\nReturns the key whose value must be passed to …\nReturns the key whose next key must be passed back.\nReturns the key whose closest descendant Merkle value must …\nReturns the key whose value must be passed to …\nReturns the key whose value must be set.\nReturns the key whose value must be set.\nReturns the change, if any, at the given key of the main …\nReturns an iterator to all the entries of the main trie …\nMaximum log level of the runtime.\nReturns the message that the signature is expected to sign.\nReturns the value the current value should be compared …\nIf <code>true</code>, then the provided value must the one superior or …\nParameter of the call, as an iterator of bytes. The …\nReturns the prefix the next key must start with. If the …\nPrototype of the virtual machine that was passed through …\nReturns the public key the signature is against.\nResumes execution after having set the value.\nResumes execution after having set the value. Must …\nResume execution. Must indicate whether the transaction …\nResume execution.\nResume the execution assuming that the signature is …\nResume the execution assuming that the signature is valid.\nIndicate that the value is unknown and resume the …\nStart running the WebAssembly virtual machine.\nReturns the signature.\nState trie version indicated by the runtime. All the …\nList of changes to the storage that the block performs.\nReturns an iterator to all the entries that are modified …\nInitial state of <code>Success::storage_changes</code>. The changes …\nBehavior if the …\nReturns the SCALE-encoded transaction that must be …\nReturns an iterator over the list of all changes performed …\nReturns the list of all child tries whose content has been …\nReturns the value the called function has returned.\nReturns the value to set.\nReturns the value to set.\nVerify the signature and resume execution.\nVirtual machine to be run.\nContains the output value of the runtime, and the virtual …\nNew Merkle value associated to this trie node. Always …\nChange to the storage value of that trie node.\nRemoves all the entries within this diff.\nReturns the diff entry at the given key.\nInserts the given key-value combination in the diff.\nInserts in the diff an entry at the given key that delete …\nReturns an iterator to all the entries in the diff.\nReturns an iterator to all the entries in the diff.\nReturns an iterator to all the entries in the diff within …\nRemoves from the diff the entry corresponding to the given …\nBuilds a new empty diff.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies the given diff on top of the current one.\nApplies the given diff on top of the current one.\nReturns the storage key that immediately follows the …\nIn order to continue the calculation, must find in the …\nSee <code>ClosestDescendant</code>.\nIn order to continue, must fetch the Merkle value of the …\nSee <code>ClosestDescendantMerkleValue</code>.\nConfiguration for <code>trie_root_calculator</code>.\nCalculation has successfully finished.\nTrie root calculation in progress.\nIn order to continue, must fetch the storage value of the …\nSee <code>StorageValue</code>.\nEvent indicating that a trie node has been inserted or …\nSee <code>TrieNodeInsertUpdateEvent</code>.\nEvent indicating that a trie node has been destroyed.\nSee <code>TrieNodeRemoveEvent</code>.\nReturns the Merkle values of the children of the trie node …\nDiff that is being applied on top of the base trie.\nVersion to use for the storage values written by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates the key of the closest descendant to the key …\nIndicate the Merkle value of closest descendant of the …\nIndicate the storage value and trie entry version of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of slices, which, when joined …\nReturns an iterator of slices, which, when joined …\nReturns an iterator of slices, which, when joined …\nReturns the key of the trie node that was inserted or …\nReturns the key of the trie node that was removed.\nReturns the same value as <code>ClosestDescendant::key</code> but as a …\nReturns the same value as <code>ClosestDescendant::key</code> but as a …\nReturns the same value as <code>ClosestDescendantMerkleValue::key</code>…\nReturns the same value as <code>TrieNodeInsertUpdateEvent::key</code> …\nReturns the same value as <code>TrieNodeRemoveEvent::key</code> but as …\nDepth level of the deepest node whose value needs to be …\nReturns the new Merkle value of the trie node that was …\nReturns the partial key of the trie node that was inserted …\nResume the computation.\nResume the computation.\nIndicate that the closest descendant or its Merkle value …\nStarts a new calculation.\nCalculated trie root hash.\nPassed a wrong value back.\nThe WebAssembly code will be instantiated once and run …\nConfiguration to pass to <code>VirtualMachinePrototype::new</code>.\nFailed to allocate memory for the virtual machine.\nHint used by the implementation to decide which kind of …\nOutcome of the <code>run</code> function.\nThe WebAssembly code will be instantiated once and run …\nThe execution has finished.\nForces using the <code>wasmi</code> backend.\nForces using the <code>wasmtime</code> backend.\nCouldn’t find the requested function.\nError that can happen when calling …\nNumber of heap pages available to the Wasm code.\nA 32-bits integer. There is no fundamental difference …\nA 32-bits integer. Used for both signed and unsigned …\nA 32-bits integer. There is no fundamental difference …\nA 64-bits integer. Used for both signed and unsigned …\nThe Wasm module requires importing a global or a table, …\nError while instantiating the WebAssembly module.\nThe virtual machine has been paused due to a call to a …\nRequested symbol isn’t a <code>u32</code>.\nThe types of the provided parameters don’t match the …\nError while compiling the WebAssembly code.\nIf a “memory” symbol is provided, it must be a memory.\nWasm module imports a memory that isn’t named “memory…\nError that can happen when initializing a …\nWasm module doesn’t contain any memory.\nThe requested function has been found in the list of …\nCouldn’t find requested symbol.\nError while reading memory.\nThe state machine is poisoned.\nError that can happen when resuming the execution of a …\nLow-level Wasm function signature.\nThe requested function has a signature that isn’t …\nError that can happen when calling <code>Prepare::start</code>.\nSmoldot doesn’t support wasm runtime that have a start …\nOpaque error that happened during execution, such as an …\nWasm module both imports and exports a memory.\nFailed to resolve a function imported by the module.\nError used in the conversions between VM implementation …\nThe WebAssembly code running through this VM is untrusted.\nThe WebAssembly code will be instantiated once and run …\nThe WebAssembly code is expected to be only run once.\nType of a value passed as parameter or returned by a …\nVirtual machine ready to start executing a function.\nValue that a Wasm function can accept or produce.\nReturns an iterator of all the <code>ExecHint</code> values …\nHint about how to execute the WebAssembly code.\nReturns <code>ForceWasmtime</code> if it is available on the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of a global that the module exports.\nIncreases the size of the memory by the given number of …\nIncreases the size of the memory by the given number of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps <code>WasmValue::I32</code> into its value.\nUnwraps <code>WasmValue::I64</code> into its value.\nTurns back this virtual machine into a prototype.\nTurns back this virtual machine into a prototype.\nReturns the maximum number of pages that the memory can …\nReturns the size of the memory, in bytes.\nReturns the size of the memory, in bytes.\nEncoded wasm bytecode.\nCreates a new process state machine from the given module. …\nCreates a <code>Signature</code> from the given parameter types and …\nReturns a list of all the types of the parameters.\nPrepares the prototype for running a function.\nCopies the given memory range into a <code>Vec&lt;u8&gt;</code>.\nCopies the given memory range into a <code>Vec&lt;u8&gt;</code>.\nReturns the type of the return type of the function. <code>None</code> …\nStarts or continues execution of this thread.\nTurns this prototype into an actual virtual machine. This …\nCalled for each import that the module has. It must assign …\nReturns the type corresponding to this value.\nWrite the data at the given memory location.\nWrite the data at the given memory location.\nIf <code>true</code>, lazy validation is enabled. This leads to a …\nIdentifier of the function to call. Corresponds to the …\nParameters of the function call.\nReturn value of the function.\nName of the function that was unresolved.\nName of module associated with the unresolved function.\nType of the value that was expected.\nType of the value that was actually passed.\nError potentially returned by <code>decode_grandpa_commit</code>.\nDecoded justification.\nDecoded justification.\nPotential error when decoding a Grandpa justification.\nIterator towards the headers of the vote ancestries.\nList of Ed25519 signatures and public keys.\nAuthority that signed the precommit. Must be part of the …\nAuthority that signed the precommit. Must be part of the …\nAttempt to decode the given SCALE-encoded Grandpa commit.\nAttempt to decode the given SCALE-encoded justification.\nDecodes a SCALE-encoded precommit.\nAttempt to decode the given SCALE-encoded commit.\nAttempt to decode the given SCALE-encoded justification.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nEd25519 signature made with …\nEd25519 signature made with …\nHash of the block concerned by the pre-commit.\nHash of the block concerned by the pre-commit.\nHeight of the block concerned by the pre-commit.\nHeight of the block concerned by the pre-commit.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nCommit contains a vote for a block that isn’t a …\nOne of the public keys is invalid.\nOne of the public keys is invalid.\nThe authorities set id of the commit doesn’t match the …\nOne of the signatures can’t be verified.\nOne of the signatures can’t be verified.\nCommit verification in progress.\nConfiguration for a commit verification process.\nError that can happen while verifying a commit.\nMust return whether a certain public key is in the list of …\nMust return whether a certain block is a descendant of the …\nOne authority has produced two signatures.\nOne authority has produced two signatures.\nVerification is finished. Contains an error if the commit …\nVerification is finished, but <code>CommitVerifyIsParent::resume</code> …\nFailed to decode the commit message.\nFailed to decode the justification.\nSee <code>CommitVerifyIsAuthority</code>.\nSee <code>CommitVerifyIsParent</code>.\nConfiguration for a justification verification process.\nError that can happen while verifying a justification.\nOne of the public keys isn’t in the list of authorities.\nOne of the public keys isn’t in the list of authorities.\nJustification doesn’t contain enough authorities …\nList of authorities that are allowed to emit pre-commits …\nPublic key to verify.\nHash of the block to check.\nHeight of the block to check.\nNumber of bytes used for encoding the block number in the …\nSCALE-encoded commit to verify.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJustification to verify.\nNumber of authorities that are allowed to emit …\nSeed for a PRNG used for various purposes during the …\nSeed for a PRNG used for various purposes during the …\nResumes the verification process.\nResumes the verification process.\nHash of the block that must be the ancestor of the block …\nHeight of the block that must be the ancestor of the block …\nVerifies that a commit is valid.\nVerifies that a justification is valid.\nList of authorities in an AURA context.\nA consensus log item for AURA.\nA consensus log item for AURA.\nAURA slot number pre-digest.\nBlock signature made using the AURA consensus engine.\nBlock signature made using the AURA consensus engine.\nList of authorities has changed.\nList of authorities has changed.\nTypes of allowed slots.\nList of authorities in a BABE context.\nA consensus log item for BABE.\nA consensus log item for BABE.\nInformation about the next epoch config, if changed. This …\nInformation about the next epoch. This is broadcast in the …\nInformation about the next epoch. This is broadcast in the …\nA BABE pre-runtime digest. This contains all data required …\nA BABE pre-runtime digest. This contains all data required …\nRaw BABE primary slot assignment pre-digest.\nRaw BABE primary slot assignment pre-digest.\nBlock signature made using the BABE consensus engine.\nBlock signature made using the BABE consensus engine.\nBABE secondary slot assignment pre-digest.\nBABE secondary deterministic slot assignment with VRF …\nBABE secondary deterministic slot assignment with VRF …\nBad length of an AURA seal.\nBad length of a BABE seal.\nError while decoding the block number.\nGeneric header digest.\nError while decoding a digest item.\nError while decoding a digest log item length.\nError while decoding the digest length.\nGeneric header digest.\nPotential error when decoding a header.\nForce an authority set change.\nForce an authority set change.\nList of authorities in a GrandPa context.\nA consensus log item for GrandPa.\nA consensus log item for GrandPa.\nA scheduled change of authority set.\nA scheduled change of authority set.\nHeader of a block, after decoding.\nHeader of a block, after decoding.\nIterator towards the digest log items.\nThere are multiple Aura pre-runtime digests in the block …\nThere are multiple Babe configuration descriptor digests …\nThere are multiple Babe epoch descriptor digests in the …\nThere are multiple Babe pre-runtime digests in the block …\nThere are multiple runtime environment updated digests in …\nThe epoch has changed, and the epoch after the current one …\nThe epoch has changed, and the epoch after the current one …\nThe epoch has changed. This provides information about the …\nThe epoch has changed. This provides information about the …\nDisable the authority with given index.\nDisable the authority with given index.\nDisable the authority with given index.\nDisable the authority with given index.\nNote that the authority with given index is disabled until …\nNote that the authority with given index is disabled until …\nSome other thing. Always ignored.\nSome other thing. Always ignored.\nA signal to pause the current authority set after the …\nA signal to pause the current authority set after the …\nProof-of-work consensus algorithm is intentionally not …\nA primary VRF-based slot assignment.\nA primary VRF-based slot assignment.\nAllow primary and secondary plain slot claims.\nAllow primary and secondary VRF slot claims.\nOnly allow primary slot claims.\nA signal to resume the current authority set after the …\nA signal to resume the current authority set after the …\nRuntime of the chain has been updated in this block. This …\nRuntime of the chain has been updated in this block. This …\nSchedule an authority set change.\nSchedule an authority set change.\nSeal popped using <code>DigestRef::pop_seal</code>.\nFound a seal that isn’t the last item in the list.\nA secondary deterministic slot assignment.\nA secondary deterministic slot assignment.\nA secondary deterministic slot assignment with VRF outputs.\nA secondary deterministic slot assignment with VRF outputs.\nHeader is too long.\nHeader is not long enough.\nFound a Babe configuration change digest without an epoch …\nConsensus item with an engine that hasn’t been …\nSee <code>DigestItemRef::UnknownConsensus</code>.\nDigest log item with an unrecognized type.\nPre-runtime item with a consensus engine that hasn’t …\nSee <code>DigestItemRef::UnknownPreRuntime</code>.\nSeal using a consensus engine that hasn’t been …\nSee <code>DigestItemRef::UnknownSeal</code>.\nValue of <code>allowed_slots</code> in <code>BabeEpochConfiguration</code>.\nReturns the Aura pre-runtime digest item, if any.\nReturns the Aura seal digest item, if any.\nReturns the Aura seal digest item, if any.\nThe authorities.\nThe authorities.\nAuthority index\nAuthority index\nAuthority index\nAuthority index\nAuthority index\nReturns the Babe epoch information stored in the header, …\nReturns the Babe epoch information stored in the header, …\nReturns the Babe pre-runtime digest item, if any.\nReturns the Babe pre-runtime digest item, if any.\nReturns the Babe seal digest item, if any.\nReturns the Babe seal digest item, if any.\nValue of <code>c</code> in <code>BabeEpochConfiguration</code>.\nAttempt to decode the given SCALE-encoded header.\nDecodes a list of authorities from a SCALE-encoded blob of …\nAttempt to decode the given SCALE-encoded header.\nThe number of blocks to delay.\nThe number of blocks to delay.\nList of auxiliary data appended to the block header.\nList of auxiliary data appended to the block header.\nReturns a digest with empty logs.\nReturns the value appropriate for <code>Header::extrinsics_root</code>. …\nThe Merkle root of the extrinsics.\nThe Merkle root of the extrinsics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a SCALE-encoded digest item.\nDecodes a <code>AuraConsensusLogRef</code> from a slice of bytes.\nBuilds an iterator corresponding to the given slice.\nDecodes a <code>AuraPreDigest</code> from a slice of bytes.\nDecodes a <code>BabeConsensusLogRef</code> from a slice of bytes.\nDecodes a <code>BabePreDigestRef</code> from a slice of bytes.\nBuilds a new <code>BabeAuthoritiesIter</code> iterating over the given …\nDecodes a <code>BabeNextConfig</code> from a slice of bytes.\nDecodes a <code>BabeAllowedSlots</code> from a slice of bytes.\nDecodes a <code>BabePreDigestRef</code> from a slice of bytes.\nDecodes a <code>BabePrimaryPreDigestRef</code> from a slice of bytes.\nDecodes a <code>BabeSecondaryPlainPreDigest</code> from a slice of …\nDecodes a <code>BabeSecondaryVRFPreDigestRef</code> from a slice of …\nDecodes a <code>GrandpaConsensusLogRef</code> from a slice of bytes.\nTurns an already-decoded list of items into a <code>DigestRef</code>.\nReturns true if the list has any item that belong to the …\nReturns true if the list has any item that belong to the …\nReturns true if the list has any item that belong to the …\nReturns <code>true</code> if there is a …\nReturns <code>true</code> if there is a …\nBuilds the hash of the header.\nBuilds the hash of the header.\nReturns a hash of a SCALE-encoded header.\nReturns a hash of a SCALE-encoded header.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nTrue if the item is relevant to the Aura consensus engine.\nTrue if the item is relevant to the Babe consensus engine.\nTrue if the item is relevant to the Grandpa finality …\nReturns <code>true</code> for <code>BabePreDigestRef::Primary</code>.\nReturns an iterator to the log items in this digest.\nReturns an iterator to the log items in this digest.\nReturns an iterator corresponding to the given slice.\nThe new authorities after the change, along with their …\nThe new authorities after the change, along with their …\nBlock number stored in the header.\nBlock number stored in the header.\nHash of the parent block stored in the header.\nHash of the parent block stored in the header.\nIf the last element of the list is a seal, removes it from …\nSr25519 public key.\nSr25519 public key.\nSr25519 public key.\nSr25519 public key.\nEd25519 public key.\nEd25519 public key.\nThe value of randomness to use for the slot-assignment.\nThe value of randomness to use for the slot-assignment.\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nReturns an iterator to list of buffers which, when …\nEquivalent to <code>HeaderRef::scale_encoding</code> but returns the …\nEquivalent to <code>Header::scale_encoding</code> but returns the data …\nSame as <code>HeaderRef::scale_encoding</code>, but with an extra …\nSame as <code>DigestRef::scale_encoding</code>, but with an extra item …\nReturns the slot number stored in the header.\nSlot number when the block was produced.\nSlot number\nSlot number\nSlot number\nSlot number\nSlot number\nThe state trie Merkle root\nThe state trie Merkle root\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nVRF output\nVRF output\nVRF output\nVRF output\nVRF proof\nVRF proof\nVRF proof\nVRF proof\nArbitrary number indicating the weight of the authority.\nArbitrary number indicating the weight of the authority.\nArbitrary number indicating the weight of the authority.\nArbitrary number indicating the weight of the authority.\nName of the consensus engine.\nName of the consensus engine.\nName of the consensus engine.\nSmoldot doesn’t interpret the content of the log item.\nSmoldot doesn’t interpret the content of the log item.\nSmoldot doesn’t interpret the content of the log item.\nName of the consensus engine.\nName of the consensus engine.\nName of the consensus engine.\nSmoldot doesn’t interpret the content of the log item.\nSmoldot doesn’t interpret the content of the log item.\nSmoldot doesn’t interpret the content of the log item.\nIdentifier of the type.\nData structure containing cryptographic key pairs.\nContent of the file is invalid. Contains a human-readable …\nError reported by the operating system.\nError while accessing the file containing the secret key. …\nNamespace of the key.\nCollection of key pairs.\nThe given <code>(namespace, public key)</code> combination is unknown …\nReturns all existing variants of <code>KeyNamespace</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a new Ed25519 key and inserts it in the keystore.\nGenerates a new Sr25519 key and inserts it in the keystore.\nInserts an Sr25519 private key in the keystore.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the list of all keys known to this keystore.\nInitializes a new keystore.\nSigns the given payload using the private key associated …\nNote that the labels must be <code>&#39;static</code> due to requirements …\nNumber of mnemonic phrase words isn’t supported by the …\nFailed to decode the provided BIP39 seed phrase.\nInvalid BIP39 mnemonic phrase.\nFailed to decode BIP39 mnemonic phrase.\nDefault seed phrase used when decoding a private key in …\nCouldn’t parse the string in any meaningful way.\nError in <code>parse_private_key</code>.\nSuccessful outcome of <code>parse_private_key</code>.\nInvalid BIP39 mnemonic phrase.\nTurns a BIP39 seed phrase into a 32 bytes cryptographic …\nDecodes a human-readable private key (a.k.a. a seed …\nDecodes a human-readable private key (a.k.a. a seed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns a human-readable private key (a.k.a. a seed phrase) …\nDerivation path found in the secret phrase.\nBase seed phrase. Must be derived through …\nError when decoding Base58 encoding.\nIdentifier indicating which chain is concerned.\nError while decoding an SS58 address.\nDecoded version of an SS58 address.\nInvalid BS58 format.\nCalculated checksum doesn’t match the one provided.\nInvalid SS58 prefix encoding.\nInteger is too large to be a valid prefix\nSS58 is too short to possibly be valid.\nIdentifier indicating which chain is concerned.\nDecodes an SS58 address from a string.\nTurns a decoded SS58 address into a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key of the account.\nImplements <code>fmt::Display</code> and displays a number of bytes in …\nImplements <code>fmt::Display</code> and displays hashes in a nice way.\nValues used to build the informant line. Implements the …\nExtra fields if a relay chain exists.\nHash of the best block that we have locally.\nNumber of the best block that we have locally.\nNumber of the best block that we have locally.\nName of the chain.\nName of the chain.\nIf true, ANSI escape characters will be written out.\nHash of the latest finalized block we have locally.\nNumber of the latest finalized block we have locally.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of characters of the informant line.\nBest block currently being propagated on the peer-to-peer. …\nNumber of network connections we are having with the rest …\nNumber of gossiping substreams open with nodes of the same …\nExtra fields related to the relay chain.\nList of requests and how to answer them.\nParse JSON-RPC method calls and notifications, and build …\nContains the public key of an account.\nThe length prefix at the beginning of the metadata is …\nOne of the parameters of the function call is invalid.\nThe parameter of a function call is invalid.\nFormat the parameters is plain invalid.\nCould not parse the body of the message as a valid …\nCould not parse the body of the message as a valid …\nLength indicated by the length prefix doesn’t match the …\nJSON-RPC request is valid, but there is a problem related …\nJSON-RPC request is valid, but there is a problem related …\nSee <code>ParseClientToServerError::Method</code> or …\nThe parameters of the function call are missing.\nUnstable event. See …\nError produced by <code>parse_jsonrpc_client_to_server</code>.\nError produced by <code>parse_notification</code>.\nError potentially returned by <code>remove_metadata_length_prefix</code>…\nToo many parameters have been passed to the function.\nCall concerns a method that isn’t recognized.\nCall concerns a notification that isn’t recognized.\nBuilds a JSON call, to send it to a JSON-RPC server.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Header</code> from a SCALE-encoded header.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of justifications. Each justification is made of a …\nReturns a list of RPC method names of all the methods in …\nReturns a list of RPC method names of all the methods in …\nReturns the name of the method.\nReturns the name of the method.\nReturns an JSON object containing the list of the …\nReturns an JSON object containing the list of the …\nParses a JSON call (usually sent from a JSON-RPC client …\nParses a JSON notification.\nRemoves the length prefix at the beginning of <code>metadata</code>. …\nReturns a list of all JSON-RPC methods that are available.\nReturns the Base58 encoding of the network identity of the …\nReturns, as an opaque string, the name of the client …\nReturns, as an opaque string, the version of the client …\nTurns the error into a JSON string representing the error …\nBuilds a JSON request, to send it to a JSON-RPC server.\nBuilds a JSON request, to send it to a JSON-RPC server.\nSerializes the response into a JSON string.\nSerializes the response into a JSON string.\nNumber of parameters actually received.\nReason why it failed.\nNumber of parameters that are expected to be received.\nName of the unrecognized method.\n0-based index of the parameter whose format is invalid.\nName of the JSON-RPC method that was attempted to be …\nName of the JSON-RPC method that was attempted to be …\nName of the JSON-RPC method that was attempted to be …\nName of the JSON-RPC method that was attempted to be …\nProblem that happens.\nUnknown notification.\nIdentifier of the request sent by the user.\nMethod-specific error. Contains a more precise error code …\nRequest has failed.\nError that can be reported to the JSON-RPC client.\nInternal JSON-RPC error.\nInvalid method parameter(s).\nThe JSON sent is not a valid Request object.\nThe method does not exist / is not available.\nError while parsing a request.\nThe JSON-RPC server indicates that it couldn’t parse a …\nInvalid JSON was received by the server.\nDecoded JSON-RPC request.\nDecoded JSON-RPC response.\nOther internal server error. Contains a more precise error …\nSuccessful request.\nBuilds a JSON response.\nBuilds a JSON error response when a request couldn’t be …\nBuilds a JSON request.\nBuilds a JSON response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nJSON-formatted identifier of the request. <code>None</code> for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtility function that returns <code>Some</code> if <code>self</code> is …\nName of the method that is being called.\nJSON-formatted list of parameters. <code>None</code> iff the <code>params</code> …\nParses a JSON-encoded RPC method call or notification.\nParses a JSON-encoded RPC response.\nInteger indicating the nature of the error.\nInteger indicating the nature of the error.\nJSON-formatted data associated with the response. <code>None</code> if …\nJSON-formatted data associated with the response. <code>None</code> if …\nShort description of the error.\nShort description of the error.\nJSON-formatted identifier of the request the response …\nJSON-formatted identifier of the request the response …\nJSON-formatted result.\nPotential error when decoding payment information runtime …\nName of the runtime function to call in order to obtain …\nFailed to parse the return value of …\nThe <code>TransactionPaymentApi</code> API uses a version that smoldot …\nAttempt to decode the output of the runtime call.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProduces the input to pass to the …\nSee module-level-documentation.\nThe attached <code>ClientMainTask</code> has been destroyed.\nThe attached <code>ClientMainTask</code> has been destroyed.\nThe attached <code>ClientMainTask</code> has been destroyed.\nConfiguration for <code>client_main_task</code>.\nOutcome of the processing of …\nJSON-RPC client has sent a plain request (i.e. that isn’…\nJSON-RPC client desires starting a new subscription.\nObject connected to the <code>ClientMainTask</code> and containing a …\nError returned by <code>SerializedRequestsIo::send_request</code>.\nSee <code>SendRequestError::cause</code>.\nObject connected to the <code>ClientMainTask</code> that allows sending …\nThe <code>SerializedRequestsIo</code> has been dropped. The …\nObject connected to the <code>ClientMainTask</code> representing an …\nA <code>SubscriptionStartProcess</code> object or a <code>Subscription</code> object …\nObject connected to the <code>ClientMainTask</code> and containing a …\nLimit to the maximum number of pending requests that was …\nError returned by <code>SerializedRequestsIo::try_send_request</code>.\nSee <code>TrySendRequestError::cause</code>.\nSee <code>SerializedRequestsIo::wait_next_response</code>.\nIndicate to the <code>ClientMainTask</code> that the subscription is …\nReason for the error.\nReason for the error.\nCreates a new <code>ClientMainTask</code> and a <code>SerializedRequestsIo</code> …\nIndicate to the <code>ClientMainTask</code> that the request should …\nIndicate to the <code>ClientMainTask</code> that the subscription start …\nIndicate to the <code>ClientMainTask</code> that the request should …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the JSON-RPC client has unsubscribed, or …\nMaximum number of simultaneous subscriptions allowed. …\nMaximum number of requests that have been sent by the …\nReturns the request which must be processed.\nReturns the request which must be processed.\nThe JSON-RPC request that was passed as parameter.\nThe JSON-RPC request that was passed as parameter.\nIndicate the response to the request to the <code>ClientMainTask</code>.\nIndicate to the <code>ClientMainTask</code> that the response to the …\nProcesses the task’s internals and waits until something …\nSend a notification the <code>ClientMainTask</code>.\nAdds a JSON-RPC request to the queue of requests of the …\nReturn the identifier of this subscription. Necessary in …\nTries to add a JSON-RPC request to the queue of requests …\nWaits for a response or a notification to send to the …\nRun indefinitely until <code>Subscription::is_stale</code> returns <code>true</code>.\nObject connected to the <code>ClientMainTask</code> and containing the …\nId of the subscription that was destroyed. Equals to the …\nObject connected to the <code>ClientMainTask</code> and containing the …\nThe task that generated the event.\nThe task that generated the event.\nThe task that generated the event.\nSends the given payload to the receiver and waits for it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the next item that was sent. If no item is …\nCollection of libp2p connections.\nModule containing everything related to the processing of …\nA multihash is a small data structure containing a code …\nImplementation of a WebSocket client that wraps around an …\nAugments an implementation of <code>AsyncRead</code> and <code>AsyncWrite</code> …\nShutdown was demanded by the remote and performed cleanly.\nConfiguration for a <code>Network</code>.\nIdentifier of a connection spawned by the <code>Network</code>.\nRequest has been canceled because the connection as a …\nOpening has been interrupted because the connection as a …\nSubstream has been closed because the connection as a …\nSee <code>Network::connection_state</code>.\nMessage from a connection task destined to the coordinator.\nMessage from the coordinator destined to a connection task.\nEvent generated by <code>Network::next_event</code>.\nError in the protocol of the handshake.\nHandshake of the given connection has completed.\nHandshake phase took too long.\nAn inbound substream that was previously accepted using …\nReceived an incoming substream, but this substream has …\nAn inbound substream has requested to use a protocol. Call …\nAn inbound substream that is waiting for a call to …\nValue that compares superior or equal to any possible […\nValue that compares superior or equal to any possible […\nValue that compares inferior or equal to any possible […\nValue that compares inferior or equal to any possible […\nState machine dedicated to a single multi-stream …\nWhat kind of handshake to perform on the newly-added …\nUse the multistream-select protocol to negotiate the Noise …\nData structure containing the list of all connections, …\nReceived a notification on a notifications substream of a …\nThe remote has closed an incoming notifications substream.\nThe remote would like to open a notifications substream.\nThe remote has canceled the opening an incoming …\nRemote has closed an outgoing notifications substream, …\nA previously open outbound substream has been closed, by …\nOutcome of trying to open a substream with …\nAn outgoing ping has failed. This event is generated …\nAn outgoing ping has succeeded. This event is generated …\nError in the connection protocol of a fully established …\nQueue of notifications with that peer is full.\nError potentially returned by <code>Network::queue_notification</code>.\nRemote has abruptly reset the connection.\nReceived a request from a request-response protocol.\nRequest received earlier has been canceled by the remote.\nOutcome of a request started using <code>Network::start_request</code>.\nA transport-level connection (e.g. a TCP socket) has been …\nReason why a connection is shutting down. See …\nState machine dedicated to a single single-stream …\nWhat kind of handshake to perform on the newly-added …\nA transport-level connection (e.g. a TCP socket) is …\nError happened in the context of the substream.\nError happened in the context of the substream.\nError happened in the context of the substream.\nIdentifier of a request, or an inbound substream, or an …\nThe connection is a WebRTC connection.\nAccepts a request for an inbound notifications substream …\nCall after an <code>Event::InboundNegotiated</code> has been emitted in …\nNotifies the state machine that a new substream has been …\nNumber of connections containers should initially allocate …\nStart closing a previously-open notifications substream, …\nReturns the state of the given connection.\nReturns the number of new outbound substreams that the …\nIf <code>true</code>, the connection has finished its handshaking phase.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAmount of time after which a connection handshake is …\nInjects into the state machine a message generated by …\nInjects a message that has been pulled from the …\nInjects a message that has been pulled from the …\nAdds a new multi-stream connection to the collection.\nAdds a new single-stream connection to the collection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the collection doesn’t contain any …\nReturns <code>true</code> if the error is caused by a faulty behavior …\nReturns <code>true</code> if <code>MultiStreamConnectionTask::reset</code> has been …\nReturns <code>true</code> if <code>SingleStreamConnectionTask::reset</code> has been …\nReturns the number of connections in the collection.\nMaximum number of substreams that each remote can have …\nMaximum size in bytes of the protocols supported by the …\nInitializes a new network data structure.\nReturns the next event produced by the service. Returns …\nStart opening a notifications substream.\nName of the ping protocol on the network.\nPulls a message that must be sent to a connection.\nPulls a message to send back to the coordinator.\nPulls a message to send back to the coordinator.\nAdds a notification to the queue of notifications to send …\nSeed for the randomness within the networking state …\nReads data coming from the connection, updates the …\nRejects a request for an inbound notifications substream …\nCall after an <code>Event::InboundNegotiated</code> has been emitted in …\nSets the state of the connection to “reset”.\nSets the state of the connection to “reset”.\nImmediately destroys the substream with the given …\nResponds to an incoming request. Must be called in …\nModifies the value that was initially passed through …\nIf <code>true</code>, the connection is shutting down.\nStart the closing of an inbound notifications substream …\nSends a request to the given peer.\nSwitches the connection to a state where it will shut down …\nReads/writes data on the substream.\nError that happened.\nIdentifier of the connection whose handshake is finished.\nIdentifier of the connection that is starting its shutdown.\nIdentifier of the connection that has finished its …\nIdentifier of the connection that has received the …\nIdentifier of the connection that has received the …\nNotification that the remote has sent. The meaning of this …\nReason why the substream has been closed.\nIdentity of the peer on the other side of the connection.\nTime between sending the ping and receiving the pong.\nName of the protocol requested by the remote.\nReason why the connection is starting its shutdown. …\nHandshake that has been sent by the remote. Its …\nPayload that has been sent by the remote. Its …\nIf the request is successful, contains the response sent …\nIf <code>Ok</code>, contains the handshake sent back by the remote. Its …\nIdentifier of the substream. Needs to be provided back …\nIdentifier of the substream.\nIdentifier of the substream.\nSubstream that was returned by <code>Network::start_request</code>.\nSubstream on which the request has been received. Must be …\nNewly-generated identifier for the substream on which the …\nSubstream that has been closed. Guaranteed to match a …\nSubstream on which the notification has been received. …\nSubstream that has been closed. Guaranteed to match a …\nUser data that was stored in the state machine for this …\n<code>true</code> if the connection was in its established phase before …\nMust be <code>true</code> if the connection has been initiated locally, …\nMultihash encoding of the TLS certificate used by the …\nLocal secret key to use for the handshake.\nMultihash encoding of the TLS certificate used by the …\nMust be <code>true</code> if the connection has been initiated locally, …\nLocal secret key to use for the handshake.\nMultistream-select is a protocol whose purpose is to …\nNoise protocol libp2p layer.\nState machine handling the handshake with a TCP or …\nSee …\nYamux multiplexing protocol.\nConfiguration to turn a <code>ConnectionPrototype</code> into a …\nSuccessfully negotiated connection. Ready to be turned …\nSubstream remains open.\nError during a connection. The connection should be shut …\nEvent that happened on the connection. See …\nAn inbound substream that was previously accepted using …\nReceived an incoming substream, but this substream has …\nAn inbound substream has requested to use a protocol. Call …\nAn inbound substream that is waiting for a call to …\nValue that compares superior or equal to all possible …\nValue that compares inferior or equal to all possible …\nState machine of a fully-established connection where …\nThe connection is now in a mode where opening new …\nError in the noise cipher. Data has most likely been …\nError while encoding noise data.\nRemote has sent a notification on an inbound notifications …\nRemote has closed an inbound notifications substream.Can …\nRemote has opened an inbound notifications substream.\nRemote has canceled an inbound notifications substream …\nRemote has closed an outgoing notifications substream, …\nRemote has reset an outgoing notifications substream. The …\nOutcome of trying to open a substream with …\nAn outgoing ping has failed. This event is generated …\nAn outgoing ping has succeeded. This event is generated …\nReceived a request in the context of a request-response …\nSubstream is now considered dead and has been removed from …\nReceived a response to a previously emitted request on a …\nState machine of a fully-established connection.\nWhether a substream should remain open or be killed.\nIdentifier of a request or a notifications substream.\nError in the Yamux multiplexing protocol.\nAccepts an inbound notifications protocol. Must be called …\nAccepts an inbound notifications protocol. Must be called …\nCall after an <code>Event::InboundNegotiated</code> has been emitted in …\nCall after an <code>Event::InboundNegotiated</code> has been emitted in …\nSends a request to the remote.\nSends a request to the remote.\nNotifies the state machine that a new substream has been …\nCloses a notifications substream that was accepted using …\nCloses a notifications substream that was accepted using …\nCloses a notifications substream opened after a successful …\nCloses a notifications substream opened after a successful …\nClose the incoming substreams, automatically denying any …\nReturns the number of new outbound substreams that the …\nWhen to start the first outgoing ping.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns this prototype into an actual connection.\nExtracts the Noise state machine from this prototype.\nMaximum number of substreams that the remote can have …\nMaximum size in bytes of the protocols supported by the …\nReturns the number of bytes waiting to be sent out on that …\nReturns the number of bytes waiting to be sent out on that …\nReturns the user data associated to a notifications …\nOpens a outgoing substream with the given protocol, …\nOpens a outgoing substream with the given protocol, …\nInterval between two consecutive outgoing ping attempts.\nName of the ping protocol on the network.\nTime after which an outgoing ping is considered failed.\nRemoves an event from the queue of events and returns it.\nEntropy used for the randomness specific to this …\nReads data coming from the socket, updates the internal …\nRejects an inbound notifications protocol. Must be called …\nRejects an inbound notifications protocol. Must be called …\nCall after an <code>Event::InboundNegotiated</code> has been emitted in …\nCall after an <code>Event::InboundNegotiated</code> has been emitted in …\nImmediately destroys the substream with the given …\nResponds to an incoming request. Must be called in …\nResponds to an incoming request. Must be called in …\nModifies the value that was initially passed through …\nModifies the value that was initially passed through …\nIndividual substream within an established connection.\nReads/writes data on the substream.\nNumber of substreams that are expected to be opened …\nCreates a new connection from the given configuration.\nQueues a notification to be written out on the given …\nQueues a notification to be written out on the given …\nHandshake sent by the remote. Its interpretation is out of …\nIdentifier of the request. Needs to be provided back when …\nIdentifier of the substream.\nIdentifier of the substream.\nIdentifier of the request. Needs to be provided back when …\nIdentifier of the request. Value that was returned by …\nIdentifier of the substream. Needs to be provided back …\nIdentifier of the substream.\nIdentifier of the substream.\nIdentifier of the substream.\nIdentifier of the substream. Value that was returned by …\nIdentifier of the substream. Value that was returned by …\nIdentifier of the substream. Value that was returned by …\nNotification sent by the remote.\nIf <code>Ok</code>, the substream has been closed gracefully. If <code>Err</code>, a …\nDuration between sending the ping and receiving the pong.\nName of the protocol requested by the remote.\nBytes of the request. Its interpretation is out of scope …\nBytes of the response. Its interpretation is out of scope …\nIf <code>Ok</code>, contains the handshake sent back by the remote. Its …\nValue that was passed to <code>SingleStream::accept_inbound</code> or …\nValue that was passed to <code>SingleStream::add_request</code> or …\nValue that was passed to <code>SingleStream::accept_inbound</code> or …\nValue that was passed to …\nSubstream has been force-closed because the graceful …\nEvent that happened on the connection. See …\nError while receiving the remote’s handshake.\nError that can happen while processing an inbound …\nError while receiving an inbound substream.\nAn inbound substream has successfully negotiated a …\nAn inbound substream that had successfully negotiated a …\nType of inbound protocol.\nError during protocol negotiation.\nError during protocol negotiation.\nError during the multistream-select handshake.\nRemote has sent a notification on an inbound notifications …\nRemote has closed an inbound notifications substream …\nReason why an inbound notifications substream has been …\nError while receiving an inbound notifications substream …\nRemote has opened an inbound notifications substream.\nRemote has canceled an inbound notifications substream …\nUnexpected end of file while receiving an inbound …\nRemote has closed an outgoing notifications substream, …\nError that can happen when trying to open an outbound …\nRemote has reset an outgoing notifications substream. The …\nRemote has accepted or refused a substream opened with …\nRemote has failed to answer one or more pings.\nA ping has been successfully answered by the remote.\nError in the protocol.\nRemote doesn’t support this protocol.\nRemote has indicated that it doesn’t support the …\nRemote has refused the handshake by closing the substream.\nError that can happen during a request in a …\nReceived a request in the context of a request-response …\nUnexpected end of file while receiving an inbound request.\nError while receiving an inbound request.\nError potentially returned by <code>Substream::respond_in_request</code>…\nReceived a response to a previously emitted request on a …\nInvalid LEB128 number when receiving the response.\nNumber of bytes decoded is larger than expected when …\nState machine containing the state of a single substream …\nSubstream has been unexpectedly closed.\nRemote has decided to close the substream. This most …\nThe substream has already been closed.\nSubstream has been closed.\nRemote has decided to <code>RST</code> the substream. This most likely …\nSubstream has been reset during the negotiation.\nSubstream has been reset.\nRemote hasn’t answered in time.\nRemote took too long to perform the handshake.\nAccepts an inbound notifications protocol. Must be called …\nCall after an <code>Event::InboundNegotiated</code> has been emitted in …\nCloses an ingoing notifications substream that was …\nCloses a outgoing notifications substream opened after a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes an new <code>ingoing</code> substream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the error is caused by a faulty behavior …\nReturns the number of bytes waiting to be sent out on that …\nInitializes an outgoing notifications substream.\nInitializes an outgoing ping substream.\nQueues a ping on the given substream. Must be passed a …\nReads data coming from the socket, updates the internal …\nRejects an inbound notifications protocol. Must be called …\nCall after an <code>Event::InboundNegotiated</code> has been emitted in …\nInitializes an outgoing request substream.\nResponds to an incoming request. Must be called in …\nQueues a notification to be written out on the given …\nHandshake sent by the remote. Its interpretation is out of …\nNotification sent by the remote.\nNumber of pings that the remote has failed to answer.\nIf <code>Ok</code>, the substream has been closed gracefully. If <code>Err</code>, a …\nTime between sending the ping and receiving the pong.\nBytes of the request. Its interpretation is out of scope …\nBytes of the response. Its interpretation is out of scope …\nIf <code>Ok</code>, contains the handshake sent back by the remote. Its …\nError that happened.\nMaximum allowed size of the request. If <code>None</code>, then no data …\nUnknown handshake or unknown multistream-select protocol …\nConfiguration of a multistream-select protocol.\nLocal node is the dialing side and requests the specific …\nError that can happen during the negotiation.\nError while decoding a frame.\nError while decoding a frame length, or frame size limit …\nNegotiation in progress.\nNegotiation is still in progress. Use the provided …\nReceived empty command.\nLocal node is the listening side.\nNegotiation is still in progress and is waiting for …\nNegotiation is still in progress and is waiting for …\nCurrent state of a multistream-select negotiation.\nNegotiation has ended, but there isn’t any protocol in …\nReading side of the connection is closed. The handshake can…\nNegotiation has ended successfully. A protocol has been …\nReceived answer to protocol request that doesn’t match …\nWriting side of the connection is closed. The handshake can…\nAccept the requested protocol and resume the handshake.\nIf this function returns true, then the multistream-select …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a new handshake state machine.\nShortcut method for <code>InProgress::new</code> and wrapping the …\nFeeds data coming from a socket, updates the internal …\nReject the requested protocol and resume the handshake.\nName of the protocol requested by the remote.\nMaximum allowed length of a protocol. Set this to a value …\nName of the protocol to try negotiate. The …\nError in the decryption state machine.\nError while decoding data.\nConfiguration for a Noise handshake.\nError while encrypting data.\nPotential error during the noise handshake.\nHandshake still in progress. More data needs to be sent or …\nAuthentication data doesn’t match what is expected.\nHandshake still in progress. More data needs to be sent or …\nStream of decrypted data. See <code>Noise::read_write</code>.\nKey passed as part of the payload failed to decode into a …\nMessage is too small. This is likely caused by a bug …\nState of the noise encryption/decryption cipher.\nState of a Noise handshake.\nThe noise key is the key exchanged during the noise …\nThe nonce has overflowed because too many messages have …\nThe nonce has overflowed because too many messages have …\nName of the protocol, typically used when negotiated it …\nFailed to decode the payload as the …\nError while decoding the handshake.\nReading side of the connection is closed. The handshake can…\nSignature of the noise public key by the libp2p key failed.\nNoise handshake has successfully completed.\nPrototype for a <code>NoiseKey</code>.\nWriting side of the connection is closed. The handshake can…\nSecret key to use for that specific handshake. Must be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTurns a private key into an <code>UnsignedNoiseKey</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value that was provided as <code>Config::is_initiator</code>…\n<code>true</code> if this side of the connection must initiate the …\nKey to use during the handshake.\nReturns the libp2p public key associated to the signature …\nTurns a libp2p private key and a Noise static private key …\nInitializes a new noise handshake state machine.\nShortcut function that calls <code>HandshakeInProgress::new</code> and …\nReturns the data that has to be signed.\nReturns the data that has to be signed.\nPrologue data. The prologue data must be identical on both …\nFeeds data coming from a socket and outputs data to write …\nFeeds data coming from a socket and outputs data to write …\nTurns this <code>UnsignedNoiseKey</code> into a <code>NoiseKey</code> after signing …\nObject to use to encrypt and decrypt all further …\n<code>PeerId</code> of the remote.\nProtocol error during the multistream-select negotiation …\nCurrent state of a connection handshake.\nError during a connection handshake. The connection should …\nConnection handshake in progress.\nConnection handshake in progress.\nProtocol error during the multistream-select negotiation …\nNo encryption protocol in common with the remote.\nNo multiplexing protocol in common with the remote.\nError in the noise cipher. Data has most likely been …\nProtocol error during the noise handshake.\nHandshake has succeeded. Connection is now open.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a new state machine for a Noise + Yamux …\nShortcut for <code>HealthyHandshake::noise_yamux</code> wrapped in a …\nFeeds data coming from a socket and writes back data to …\nPrototype for the connection.\nNetwork identity of the remote.\nRemote has sent data after having sent a <code>FIN</code> flag in the …\nOuter substream has closed in the middle of a frame.\nError while decoding data.\nReceived a <code>FIN_ACK</code> flag without having sent a <code>FIN</code> flag.\nStream of data without the frames. See …\nFailed to decode the protobuf header.\nThe remote wants to reset the substream. This is a normal …\nState of the framing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a new <code>WebRtcFraming</code>.\nFeeds data coming from a socket and outputs data to write …\nSubstream was already closed.\nSubstream was already reset.\nA <code>GoAway</code> has already been sent.\nConfiguration for a new <code>Yamux</code>.\nRemote tried to send more data than it was allowed to.\nRemote has sent a data frame containing data at the same …\nError while decoding the Yamux stream.\nThe remote should have sent an ACK flag but didn’t.\nReceived a “go away” request. This means that it is …\nA <code>GoAway</code> frame has been received in the past.\nFailed to decode an incoming Yamux header.\nNothing in particular happened.\nRemote has requested to open a new substream.\nReceived a SYN flag with a substream ID that is of the …\nNumber of credits allocated to the local node has …\nValue that compares superior or equal to all possible …\nMaximum number of simultaneous outgoing pings allowed.\nValue that compares inferior or equal to all possible …\nMaximum number of simultaneous PONG frames to send out has …\nMaximum number of simultaneous RST frames to send out has …\nReceived multiple <code>GoAway</code> frames.\nBy default, all new substreams have this implicit window …\nImpossible to allocate a new substream.\nNo substream is pending.\nError potentially returned by <code>Yamux::open_substream</code>.\nName of the protocol, typically used when negotiated it …\nError potentially returned by …\nReceived a response to a ping that has been sent out …\nRemote has sent a ping response, but its opaque data didn…\nReceived data corresponding to a substream.\nDetails about the incoming data.\nError potentially returned by <code>Yamux::reset</code>.\nError potentially returned by <code>Yamux::send_goaway</code>.\nRemote has asked to reset a substream.\nIdentifier of a substream in the context of a connection.\nThe remote sent an ACK flag but shouldn’t have.\nReceived a SYN flag with a known substream ID.\nRemote sent additional data on a substream after having …\nYamux state machine. See the module-level documentation …\nAccepts an incoming substream.\nAdds <code>bytes</code> to the number of bytes the remote is allowed to …\nExpected number of substreams simultaneously open, both …\nReturns the list of all substreams that have been closed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if <code>Yamux::send_goaway</code> has been called in the …\nReturns <code>true</code> if <code>Yamux::send_goaway</code> has been called in the …\nReturns <code>true</code> if the given <code>SubstreamId</code> exists.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there is no substream in the state machine.\n<code>true</code> if the local machine has initiated the connection. …\nReturns the number of substreams in the Yamux state …")