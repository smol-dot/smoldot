// Smoldot
// Copyright (C) 2023  Pierre Krieger
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

use super::super::{vm::ExecHint, Config, HeapPages, HostVm, HostVmPrototype};
use super::with_core_version_custom_sections;

/*

The Wasm fixtures in the tests of this module have been generated by compiling variations of the
Rust code below.

Compilation options:
> rustc --crate-type cdylib -C opt-level=z --target wasm32-unknown-unknown ./foo.rs


extern "C" {
    fn ext_hashing_keccak_256_version_1(ptrsz: i64) -> i32;
}

#[no_mangle]
extern "C" fn test(_param_ptr: i32, _param_sz: i32) -> i64 {
    let slice = b"hello world";
    let ptrsz = u64::from(slice.len() as u32) << 32 | u64::from(slice.as_ptr() as usize as u32);

    let outptr =
        unsafe { ext_hashing_keccak_256_version_1(i64::from_ne_bytes(ptrsz.to_ne_bytes())) };
    let outsz = 32;
    let out: &[u8] = unsafe {
        core::slice::from_raw_parts(
            u32::from_ne_bytes(outptr.to_ne_bytes()) as usize as *const u8,
            outsz as usize,
        )
    };

    if out
        != &[
            0x47, 0x17, 0x32, 0x85, 0xa8, 0xd7, 0x34, 0x1e, 0x5e, 0x97, 0x2f, 0xc6, 0x77, 0x28,
            0x63, 0x84, 0xf8, 0x02, 0xf8, 0xef, 0x42, 0xa5, 0xec, 0x5f, 0x03, 0xbb, 0xfa, 0x25,
            0x4c, 0xb0, 0x1f, 0xad,
        ]
    {
        core::arch::wasm32::unreachable()
    }

    0
}

*/

#[test]
fn ext_hashing_keccak_256_version_1() {
    let module_bytes = with_core_version_custom_sections(
        wat::parse_str(
            r#"
    (module
        (type (;0;) (func (param i64) (result i32)))
        (type (;1;) (func (param i32 i32) (result i32)))
        (type (;2;) (func (param i32 i32) (result i64)))
        (type (;3;) (func (param i32 i32 i32) (result i32)))
        (import "env" "ext_hashing_keccak_256_version_1" (func (;0;) (type 0)))
        (func (;1;) (type 1) (param i32 i32) (result i32)
            local.get 0
            local.get 1
            i32.const 32
            call 4
            i32.const 0
            i32.ne)
        (func (;2;) (type 2) (param i32 i32) (result i64)
            block  ;; label = @1
            i32.const 1048576
            i64.extend_i32_u
            i64.const 47244640256
            i64.or
            call 0
            i32.const 1048587
            call 1
            br_if 0 (;@1;)
            i64.const 0
            return
            end
            unreachable
            unreachable)
        (func (;3;) (type 3) (param i32 i32 i32) (result i32)
            (local i32 i32 i32)
            i32.const 0
            local.set 3
            block  ;; label = @1
            local.get 2
            i32.eqz
            br_if 0 (;@1;)
            block  ;; label = @2
                loop  ;; label = @3
                local.get 0
                i32.load8_u
                local.tee 4
                local.get 1
                i32.load8_u
                local.tee 5
                i32.ne
                br_if 1 (;@2;)
                local.get 0
                i32.const 1
                i32.add
                local.set 0
                local.get 1
                i32.const 1
                i32.add
                local.set 1
                local.get 2
                i32.const -1
                i32.add
                local.tee 2
                i32.eqz
                br_if 2 (;@1;)
                br 0 (;@3;)
                end
            end
            local.get 4
            local.get 5
            i32.sub
            local.set 3
            end
            local.get 3)
        (func (;4;) (type 3) (param i32 i32 i32) (result i32)
            local.get 0
            local.get 1
            local.get 2
            call 3)
        (table (;0;) 1 1 funcref)
        (memory (;0;) 17)
        (global (;0;) (mut i32) (i32.const 1048576))
        (global (;1;) i32 (i32.const 1048619))
        (global (;2;) i32 (i32.const 1048624))
        (export "memory" (memory 0))
        (export "test" (func 2))
        (export "__data_end" (global 1))
        (export "__heap_base" (global 2))
        (data (;0;) (i32.const 1048576) "hello worldG\172\85\a8\d74\1e^\97/\c6w(c\84\f8\02\f8\efB\a5\ec_\03\bb\fa%L\b0\1f\ad")
    )
    "#,
        )
        .unwrap(),
    );

    for exec_hint in ExecHint::available_engines() {
        let proto = HostVmPrototype::new(Config {
            allow_unresolved_imports: false,
            exec_hint,
            heap_pages: HeapPages::new(1024),
            module: &module_bytes,
        })
        .unwrap();

        let mut vm = HostVm::from(proto.run_no_param("test").unwrap());
        loop {
            match vm {
                HostVm::ReadyToRun(r) => vm = r.run(),
                HostVm::Finished(v) => {
                    assert_eq!(v.value().as_ref(), b"");
                    break;
                }
                _ => unreachable!(),
            }
        }
    }
}

// TODO: test the other algorithms
